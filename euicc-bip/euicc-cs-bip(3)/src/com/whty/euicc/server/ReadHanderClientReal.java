package com.whty.euicc.server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;

import com.whty.euicc.tls.SocketUtils;

public class ReadHanderClientReal extends Thread {
	Socket s;
	int timer = 1;// 模拟收到的卡片返回命令的次数
DataInputStream in = null;
			DataOutputStream out = null;
	public ReadHanderClientReal(Socket server) {
		this.s = server;
	}

	public void run() {
		try {
			in = new DataInputStream(s.getInputStream());
			out = new DataOutputStream(s.getOutputStream());
		while (true) {
			
			int len = 0;
				len = in.readInt();
				in.skipBytes(4);
				byte[] smsData = SocketUtils.readBytes(in, len);
				String strData = new String(smsData);
				// String data = in.readUTF();
				if (strData != null) {
					if (timer == 1) {
						// System.out.println("卡片上行ClientHello消息 ：");
						// ServerHello-ServerHelloDone
						byte[] ch = "16030300310200002D030355555555555555555555555555555555555555555555555555555555555555550000AE0000050001000102"
								.getBytes();
						out.writeInt(ch.length);
						SocketUtils.writeBytes(out, ch, ch.length);

						byte[] ch1 = "16030300040E000000".getBytes();
						out.writeInt(ch1.length);
						SocketUtils.writeBytes(out, ch1, ch1.length);
						// out.writeUTF("16030300310200002D030355555555555555555555555555555555555555555555555555555555555555550000AE0000050001000102");
						// out.writeUTF("16030300040E000000");
					} else if (timer == 4) {
						// System.out.println("卡片上行key-exchange..3消息 ：");
						// change_cipher_spec消息--finished
						byte[] ch2 = "140303000101".getBytes();
						out.writeInt(ch2.length);
						SocketUtils.writeBytes(out, ch2, ch2.length);

						byte[] ch3 = "160303005000010203040506070809AABBCCDDEEFF88D375DBDA417D0E81753D978FB9E00BE7C4E135BFAF10260E73EF66DA04450BC11B28C27E462B7BE3C3DF2F6F14839E6DF7865F2DC87B06848858C5C577B9A9"
								.getBytes();
						out.writeInt(ch3.length);
						SocketUtils.writeBytes(out, ch3, ch3.length);
						// out.writeUTF("140303000101");
						// out.writeUTF("160303005000010203040506070809AABBCCDDEEFF88D375DBDA417D0E81753D978FB9E00BE7C4E135BFAF10260E73EF66DA04450BC11B28C27E462B7BE3C3DF2F6F14839E6DF7865F2DC87B06848858C5C577B9A9");
					} else if (timer == 5) {
						// System.out.println("Tls握手结束，进入https流程，收到卡片第一个post请求 ：");
						byte[] ch4 = "170303018000010203040506070809AABBCCDDEEFFC88C791855C1996407FB11A073B073E8617A14409ACD56E96A867D4315C613735967252FC2CE9A1B5F829BF25996A278393CD98BFCAD8272FB4472DB74496619B8221E5B5A83CAE77BDB7B31112A7009F21F9927BBD92E8B6039A225D98B8253BD0A31F2ED65559BBF9E86D192CF401DD7A1497808BAAF30F1E25CC3CC4D3EA6B251256284303FB195FB2A06BD3E8A0BCDFF3358EDB9BB5A1606E7B3FFC43B26C1E639CC6AB3259B4DECB863E6AD51949228FD617D038E9A3BB041B437ADD86801506714C998E959E4FD32007E9C6268700956C74F78C3D9D1BE88C8358385CD9796320B6EFBDFC15699189DED12F95D4B51B878CD27B880051038719A00CE22F10EF66CF062A9D718AFA2F4A6EE1D8D035DCCB1C11AC1F9984CC283C44764BC89CE90A7A51B3920DAB98F07A201AE83A71D5BF468A774D1BA84AFBC221E5473C2DD5E41B8D03FED7E44B1A10AA87DE9598BA29EC7E335BD23D0431AE3C6450DC3025A04CBAA64DD2B22D44C28F8763D"
								.getBytes();
						out.writeInt(ch4.length);
						SocketUtils.writeBytes(out, ch4, ch4.length);
						// out.writeUTF("170303018000010203040506070809AABBCCDDEEFFC88C791855C1996407FB11A073B073E8617A14409ACD56E96A867D4315C613735967252FC2CE9A1B5F829BF25996A278393CD98BFCAD8272FB4472DB74496619B8221E5B5A83CAE77BDB7B31112A7009F21F9927BBD92E8B6039A225D98B8253BD0A31F2ED65559BBF9E86D192CF401DD7A1497808BAAF30F1E25CC3CC4D3EA6B251256284303FB195FB2A06BD3E8A0BCDFF3358EDB9BB5A1606E7B3FFC43B26C1E639CC6AB3259B4DECB863E6AD51949228FD617D038E9A3BB041B437ADD86801506714C998E959E4FD32007E9C6268700956C74F78C3D9D1BE88C8358385CD9796320B6EFBDFC15699189DED12F95D4B51B878CD27B880051038719A00CE22F10EF66CF062A9D718AFA2F4A6EE1D8D035DCCB1C11AC1F9984CC283C44764BC89CE90A7A51B3920DAB98F07A201AE83A71D5BF468A774D1BA84AFBC221E5473C2DD5E41B8D03FED7E44B1A10AA87DE9598BA29EC7E335BD23D0431AE3C6450DC3025A04CBAA64DD2B22D44C28F8763D");
					} else if (timer == 6) {
						// 下发profile数据
						byte[] ch5 = "17030301e
								.getBytes();
						out.writeInt(ch5.length);
						SocketUtils.writeBytes(out, ch5, ch5.length);
						// out.writeUTF("170303018000010203040506070809AABBCCDDEEFFC88C791855C1996407FB11A073B073E8617A14409ACD56E96A867D4315C613735967252FC2CE9A1B5F829BF25996A278393CD98BFCAD8272FB4472DB74496619B8221E5B5A83CAE77BDB7B31112A7009F21F9927BBD92E8B6039A225D98B8253BD0A31F2ED65559BBF9E86D192CF401DD7A1497808BAAF30F1E25CC3CC4D3EA6B251256284303FB195FB2A06BD3E8A0BCDFF3358EDB9BB5A1606E7B3FFC43B26C1E639CC6AB3259B4DECB863E6AD51949228FD617D038E9A3BB041B437ADD86801506714C998E959E4FD32007E9C6268700956C74F78C3D9D1BE88C8358385CD9796320B6EFBDFC15699189DED12F95D4B51B878CD27B880051038719A00CE22F10EF66CF062A9D718AFA2F4A6EE1D8D035DCCB1C11AC1F9984CC283C44764BC89CE90A7A51B3920DAB98F07A201AE83A71D5BF468A774D1BA84AFBC221E5473C2DD5E41B8D03FED7E44B1A10AA87DE9598BA29EC7E335BD23D0431AE3C6450DC3025A04CBAA64DD2B22D44C28F8763D");
					} else if (timer == 7) {
						// 结束会话通知
						byte[] ch6 = "8014000C810301410082028281830100"
								.getBytes();
						out.writeInt(ch6.length);
						SocketUtils.writeBytes(out, ch6, ch6.length);
						// out.writeUTF("8014000C810301410082028281830100");
					}
					if (timer == 8) {
						byte[] ch7 = "02700000621512011212000001000000000600B5E0D4D319615E42814A834884370500EE0222B8EF0200C83501033902058E471508696E7465726E6574076974656C63656C03636F6D3C030220FB2401FF3E05210A08288C890D8A0B31302E382E34302E313430"
								.getBytes();
						out.writeInt(ch7.length);
						SocketUtils.writeBytes(out, ch7, ch7.length);

					}
					System.out.println("卡片上行数据 ：" + timer + "___" + strData);
					timer++;
					// 服务器收到卡片返回的消息 要进行判断，然后进行处理 并下发下一条指令，在这里模拟
					// ClientHello、Client-3、

				}

			} 
		}catch (Exception e) {
			//e.printStackTrace();
			//System.out.println("连接异常，断开");
			if (s != null) {
				try {
					in.close();
					s.close();
				} catch (IOException e1) {
					//e1.printStackTrace();
					System.out.println("异常1");
				}
//				e.printStackTrace();
				System.out.println("关闭sockey连接 :"+s.isClosed());
				//return;
			}
		}
//		finally{
//			try {
//				in.close();
//				out.close();
//				s.close();
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}

	}
}

<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  	<display-name>euicc行业前置</display-name>
	<!-- web.xml加载过程
	在WEB项目还没有完全启动起来的时候就已经完成了的工作：
	1.读取listener节点和context-param节点，创建一个ServletContext，将context-param的键对存入servletContext
	创建listener类实例来创建监听，获得context-param的值
	2.读取filter节点，根据指定类路径实例化过滤器
	项目启动后：
	1.如果系统中有Servlet，则Servlet是在第一次发起请求的时候被实例化的，而且一般不会被容器销毁，它可以服务于多个用户的请求。
	总体加载顺序：<context-param> -> <listener> -> <filter> -> <servlet> 
	强调：对于某类元素而言，与它们出现的顺序是有关的。以<filter>为例，web.xml中当然可以定义多个<filter>，
	与<filter>相关的一个元素是<filter-mapping>，注意，对于拥有相同<filter-name>的<filter>和<filter-mapping>元素而言，
	<filter-mapping>必须出现在<filter>之后，否则当解析到<filter-mapping>时，
	它所对应的<filter-name>还未定义。web容器启动初始化每个<filter>时，按照<filter>出现的顺序来初始化的，
	当请求资源匹配多个<filter-mapping>时，
	<filter>拦截资源是按照<filter-mapping>元素出现的顺序来依次调用doFilter()方法的。
	<servlet>同<filter>类似
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:/spring.xml</param-value>
	</context-param>
	
	<!-- 1.Servlet里有request和response两个对象，Filter能够在一个request到达Servlet之前预处理request，
	                   也可以在离开Servlet时处理response，Filter其实是一个Servlet链。
	   2.  参数encoding用于指定编码类型，参数forceEncoding设为true时，
	     强制执行request.setCharacterEncoding(this.encoding)和
	     reponse.setCharacterEncoding(this.encoding)中的方法。
	  -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<!-- <init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param> -->
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<servlet>
		<servlet-name>SpringMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:/spring/spring-mvc.xml</param-value>
		</init-param>
		<!-- <load-on-startup>的内容可以为空，或者是一个整数。
		这个值表示由Web容器载入内存的顺序 ，值较小的servlet先被加载-->
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>
			org.apache.cxf.transport.servlet.CXFServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- <servlet-mapping>将URL模式映射到某个Servlet，即该Servlet处理的URL -->
	<servlet-mapping>
		<servlet-name>SpringMvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/webservice/*</url-pattern>
	</servlet-mapping>
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.whty.efs.webservice.es;

import java.awt.geom.Area;
import java.math.BigInteger;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;

import javax.jws.HandlerChain;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.commons.lang3.StringUtils;
import org.apache.cxf.interceptor.InInterceptors;
import org.apache.cxf.interceptor.OutInterceptors;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.gson.Gson;
import com.whty.efs.common.bean.RespMessage;
import com.whty.efs.common.exception.ErrorCode;
import com.whty.efs.common.exception.EuiccBusiException;
import com.whty.efs.common.https.BaseHttp;
import com.whty.efs.data.pojo.EuiccCard;
import com.whty.efs.data.pojo.EuiccProfile;
import com.whty.efs.data.pojo.EuiccProfileWithBLOBs;
import com.whty.efs.data.service.IEuiccCardInfoService;
import com.whty.efs.data.service.IEuiccProfileInfoService;
import com.whty.efs.packets.message.EuiccMsg;
import com.whty.efs.packets.message.MsgHeader;
import com.whty.efs.packets.message.request.ES2CreateIsdPReqBody;
import com.whty.efs.packets.message.request.ES2DeleteProfileReqBody;
import com.whty.efs.packets.message.request.ES2DisableProfileReqBody;
import com.whty.efs.packets.message.request.ES2EnableProfileReqBody;
import com.whty.efs.packets.message.request.ES2GetEISReqBody;
import com.whty.efs.packets.message.request.ES2InstallProfileReqBody;
import com.whty.efs.packets.message.request.ES2PersonalAllIsdPReqBody;
import com.whty.efs.packets.message.request.ES2UpdatePolicyRuleReqBody;
import com.whty.efs.packets.message.request.ES2UpdateSubscriAddrReqBody;
import com.whty.efs.packets.message.request.POL2Type;
import com.whty.efs.webservice.es.message.EISType;
import com.whty.efs.webservice.es.message.ES2DeleteProfileRequest;
import com.whty.efs.webservice.es.message.ES2DeleteProfileResponse;
import com.whty.efs.webservice.es.message.ES2DisableProfileRequest;
import com.whty.efs.webservice.es.message.ES2DisableProfileResponse;
import com.whty.efs.webservice.es.message.ES2DownloadProfileRequest;
import com.whty.efs.webservice.es.message.ES2DownloadProfileResponse;
import com.whty.efs.webservice.es.message.ES2EnableProfileRequest;
import com.whty.efs.webservice.es.message.ES2EnableProfileResponse;
import com.whty.efs.webservice.es.message.ES2GetEISRequest;
import com.whty.efs.webservice.es.message.ES2GetEISResponse;
import com.whty.efs.webservice.es.message.ES2Mno;
import com.whty.efs.webservice.es.message.ES2UpdatePolicyRulesRequest;
import com.whty.efs.webservice.es.message.ES2UpdatePolicyRulesResponse;
import com.whty.efs.webservice.es.message.ES2UpdateSubscriptionAddressRequest;
import com.whty.efs.webservice.es.message.ES2UpdateSubscriptionAddressResponse;
import com.whty.efs.webservice.es.message.ExecutionStatusType;
import com.whty.efs.webservice.es.message.POL2RuleActionType;
import com.whty.efs.webservice.es.message.POL2RuleQualificationType;
import com.whty.efs.webservice.es.message.POL2RuleSubjectType;
import com.whty.efs.webservice.es.message.POL2RuleType;
import com.whty.efs.webservice.es.message.StatusCodeDataType;
import com.whty.efs.webservice.es.message.StatusType;
import com.whty.efs.webservice.util.CertConstant;

/**
 * This class was generated by Apache CXF 3.1.7
 * 2016-09-12T13:37:17.402+08:00
 * Generated source version: 3.1.7
 * MNO-DP接口
 */

@javax.jws.WebService(
                      serviceName = "ES2MnoService",
                      portName = "MnoES2Port",
                      targetNamespace = "http://namespaces.gsma.org/esim-messaging/3",
                      wsdlLocation = "WebServicesAPI/ES2_MNO.wsdl",
                      endpointInterface = "com.whty.efs.webservice.es.message.ES2Mno")
@HandlerChain(file="/ws/chain/es-handler-chain.xml")
@InInterceptors(interceptors="org.apache.cxf.interceptor.LoggingInInterceptor")
@OutInterceptors(interceptors="com.whty.efs.webservice.interceptor.ESOutInterceptor")                  
public class MnoES2PortImpl implements ES2Mno {
	@Autowired
	IEuiccCardInfoService euiccCardInfoService;
	@Autowired
	IEuiccProfileInfoService euiccProfileInfoService;

    private static final Logger LOG = Logger.getLogger(MnoES2PortImpl.class.getName());

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES2Mno#es2DisableProfile(com.whty.efs.webservice.es.message.ES2DisableProfileRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES2DisableProfileResponse es2DisableProfile(ES2DisableProfileRequest parameters) { 
        LOG.info("Executing operation es2DisableProfile");
        com.whty.efs.webservice.es.message.ES2DisableProfileResponse _return = new ES2DisableProfileResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	checkDisaIniCondit(parameters);
        	disableProfile(parameters);
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
           
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "SM-SR is not responsible for the euicc card!")){
        			dataType.setSubjectIdentifier("8.1");
        			dataType.setSubject("eUICC");
        			dataType.setReason("Refused");
        			dataType.setMessage("Indicates that the target Profile can’t be disabled.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Invalid destination")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Invalid destination");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is known to the SM-SR but installed on another eUICC than the one identified by the function caller.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Not Allowed")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Not Allowed");
        			dataType.setMessage("Indicates that the function caller is not allowed to perform this function on the target Profile.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "POL1 of the Profile prevents disabling")){
        			dataType.setSubjectIdentifier("8.2.2");
        			dataType.setSubject("POL1");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL1 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "The target Profile POL2 Policy does not allowed disable")){
        			dataType.setSubjectIdentifier("8.2.3");
        			dataType.setSubject("POL2");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL2 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "ISD-R Execution error")){
        			dataType.setSubjectIdentifier("8.4");
        			dataType.setSubject("ISD-R");
        			dataType.setReason("Execution error");
        			dataType.setMessage("Error during execution of the enabling command on the eUICC.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "SM-SR Unknown")){
        			dataType.setSubjectIdentifier("8.7");
        			dataType.setSubject("SM-SR");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the SM-SR, identified by this smsr-id, is unknown to or whose address cannot be resolved by the SM-SR");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			dataType.setSubjectIdentifier("8.9.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
	private void checkDisaIniCondit(ES2DisableProfileRequest parameters) {
		List<EuiccProfileWithBLOBs> profileList = euiccProfileInfoService.selectByEid(new String(parameters.getEid()));
		if (profileList.size() == 1) {
			throw new EuiccBusiException("8.1", "eUICC Refused");
		}
		EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
		if (euiccCard == null) {
			throw new EuiccBusiException("8.1.1", "EID Unknown");
		}else if (!StringUtils.equals(euiccCard.getSmsrId(), parameters.getSmsrId())) {
			throw new EuiccBusiException("8.7", "SM-SR Unknown");
		}
		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
		if (profile == null) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Unknown");
		}else if (StringUtils.isNotBlank(profile.getIsdPAid()) && !StringUtils.equals(profile.getEid(), new String(parameters.getEid()))) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Invalid destination");
		}
		//TODO:Profile ICCID Not Allowed
	}
    /**
     * 禁用profile
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage disableProfile(ES2DisableProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("disableProfileByDp");
        	ES2DisableProfileReqBody requestBody = new ES2DisableProfileReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostByDp(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }

    
    public com.whty.efs.webservice.es.message.ES2EnableProfileResponse es2EnableProfile(ES2EnableProfileRequest parameters) { 
        LOG.info("Executing operation es2EnableProfile");
        com.whty.efs.webservice.es.message.ES2EnableProfileResponse _return = new ES2EnableProfileResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	checkEnaInitialConditions(parameters);
    		
        	enableProfile(parameters);
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Invalid destination")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Invalid destination");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is known to the SM-SR but installed on another eUICC than the one identified by the function caller.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Not Allowed")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Not Allowed");
        			dataType.setMessage("Indicates that the function caller is not allowed to perform this function on the target Profile.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "POL1 of the currently Enabled Profile prevents this action")){
        			dataType.setSubjectIdentifier("8.2.2");
        			dataType.setSubject("POL1");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL1 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "The current Profile POL2 Policy does not allowed disable")){
        			dataType.setSubjectIdentifier("8.2.3");
        			dataType.setSubject("POL2");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL2 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "ISD-R Execution error")){
        			dataType.setSubjectIdentifier("8.4");
        			dataType.setSubject("ISD-R");
        			dataType.setReason("Execution error");
        			dataType.setMessage("Error during execution of the enabling command on the eUICC.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "SM-SR Unknown")){
        			dataType.setSubjectIdentifier("8.7");
        			dataType.setSubject("SM-SR");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the SM-SR, identified by this smsr-id, is unknown to or whose address cannot be resolved by the SM-SR");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			dataType.setSubjectIdentifier("8.9.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
	private void checkEnaInitialConditions(ES2EnableProfileRequest parameters) {
		//TODO:关于Profile ICCID Not Allowed，涉及权限及认证问题，由谁决定？？
		EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
		if (euiccCard == null) {
			throw new EuiccBusiException("8.1.1", "EID Unknown");
		}else if (!StringUtils.equals(euiccCard.getSmsrId(), parameters.getSmSrId())) {
			throw new EuiccBusiException("8.7", "SM-SR Unknown");
		}
		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
		if (profile == null) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Unknown");
		}else if (StringUtils.isNotBlank(profile.getIsdPAid()) && !StringUtils.equals(profile.getEid(), new String(parameters.getEid()))) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Invalid destination");
		}
	}
    /**
     * 调用DP禁用profile
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage enableProfile(ES2EnableProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("enableProfileByDp");
        	ES2EnableProfileReqBody requestBody = new ES2EnableProfileReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostByDp(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("2030", e.getMessage());
		}
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }
    /**
     * 当下载profile enableProfile参数为true时，下载完成后启用profile
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage enableProfileAfterDownload(ES2DownloadProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("enableProfileByDp");
    		ES2EnableProfileReqBody requestBody = new ES2EnableProfileReqBody();
    		requestBody.setEid(new String(parameters.getEid()));
    		requestBody.setIccid(parameters.getIccid());
    		EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
    		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
    		byte[] msgBype = BaseHttp.doPostByDp(json);
    		respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
    	} catch (Exception e) {
    		throw new EuiccBusiException("2030", e.getMessage());
    	}
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }
    public com.whty.efs.webservice.es.message.ES2DownloadProfileResponse es2DownloadProfile(ES2DownloadProfileRequest parameters) { 
        LOG.info("Executing operation es2EnableProfile");
        com.whty.efs.webservice.es.message.ES2DownloadProfileResponse _return = new ES2DownloadProfileResponse();
        
        ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		statusType.setStatusCodeData(dataType);
        try {
            wholeDownloadProfile(parameters);
            if (parameters.isEnableProfile()) {
            	enableProfileAfterDownload(parameters);
			}
            GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			_return.setProcessingStart(processStart);
			_return.setProcessingEnd(processStart);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        	  if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the Profile, identified by this iccid is unknown to the SM-DP.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Not Allowed")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Not Allowed");
        			dataType.setMessage("Indicates that the function caller is not allowed to perform this function on the target Profile.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile Type Unknown")){
        			dataType.setSubjectIdentifier("8.2.5");
        			dataType.setSubject("Profile Type");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the Profile type identified by this profileType is unknown to the SM-DP.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile Type Not Allowed")){
        			dataType.setSubjectIdentifier("8.2.5");
        			dataType.setSubject("Profile Type");
        			dataType.setReason("Not Allowed");
        			dataType.setMessage("Indicates that the function caller is not allowed to perform this function on the ProfileType.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "ISD-R Execution error")){
        			dataType.setSubjectIdentifier("8.4");
        			dataType.setSubject("ISD-R");
        			dataType.setReason("Execution error");
        			dataType.setMessage("Error during execution of the command on the eUICC.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "SM-SR Unknown")){
        			dataType.setSubjectIdentifier("8.7");
        			dataType.setSubject("SM-SR");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the SM-SR, identified by this smsr-id, is unknown to or whose address cannot be resolved by the SM-SR");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			dataType.setSubjectIdentifier("8.9.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    
    private RespMessage wholeDownloadProfile(ES2DownloadProfileRequest parameters) {
    	RespMessage respMessage = null;
    	try {
    		checkInitialConditions(parameters);
			respMessage = createIsdP(parameters);
			respMessage = personalIsdP(parameters);
	    	respMessage = installProfile(parameters);
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}
    	
    	return respMessage;
    	
	}
    /**
     * 检查下载流程初始条件
     * @param parameters
     */
	private void checkInitialConditions(ES2DownloadProfileRequest parameters) {
		EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
		if (euiccCard == null) {
			throw new EuiccBusiException("8.1.1", "EID Unknown");
		}else if (!StringUtils.equals(euiccCard.getSmsrId(), parameters.getSmSrId())) {
			throw new EuiccBusiException("8.7", "SM-SR Unknown");
		}
		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
		if (profile == null) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Unknown");
		}/*else if (StringUtils.isNotBlank(profile.getIsdPAid())) {//权限及认证问题，由谁决定
			throw new EuiccBusiException("8.2.1", "Profile ICCID Not Allowed");
		}*/else if (!StringUtils.equals(profile.getProfileType(), profile.getProfileType())){
			throw new EuiccBusiException("8.2.5", "Profile Type Unknown");
		
		}
	}
    /**
     * 创建isd-p
     * @param parameters
     * @return
     * @throws Exception 
     */
    private RespMessage createIsdP(ES2DownloadProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("createISDPByDp");
        	ES2CreateIsdPReqBody requestBody = new ES2CreateIsdPReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostByDp(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;

    }
    /**
     *双向认证
     * @param parameters
     * @return
     * @throws Exception 
     */
    private RespMessage personalIsdP(ES2DownloadProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		String certDpEcdsa = CertConstant.DP_CERT;
        	MsgHeader header = new MsgHeader("personalAllISDP");
        	ES2PersonalAllIsdPReqBody requestBody = new ES2PersonalAllIsdPReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	requestBody.setCertDpEcdsa(certDpEcdsa);
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostByDp(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;

    }
    /**
     * 下载安装profile
     * @param parameters
     * @return
     * @throws Exception 
     */
    private RespMessage installProfile(ES2DownloadProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("installProfileByDp");
        	ES2InstallProfileReqBody requestBody = new ES2InstallProfileReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostByDp(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;

    }
    
    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES2Mno#es2GetEIS(com.whty.efs.webservice.es.message.ES2GetEISRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES2GetEISResponse es2GetEIS(ES2GetEISRequest parameters) { 
        LOG.info("Executing operation es2GetEIS");
        com.whty.efs.webservice.es.message.ES2GetEISResponse _return = new ES2GetEISResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	EuiccCard card = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
        	if (StringUtils.isBlank(card.getSmsrId())) {
				throw new EuiccBusiException("8.7", "SM-SR Unknown");
			}
        	String resultEis = getEIS(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            _return.setEis(new Gson().fromJson(resultEis, EISType.class));
            return _return;	
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
            	  if(StringUtils.equals(ex.getMessage(), "SM-SR Unknown")){
            			dataType.setSubjectIdentifier("8.7");
            			dataType.setSubject("SM-SR");
            			dataType.setReason("Unknown");
            			dataType.setMessage("Indicates that the SM-SR, identified by this smsr-id, is unknown to or whose address cannot be resolved by the SM-SR");
            			statusType.setStatus(StatusType.FAILED);
            			statusType.setStatusCodeData(dataType);
            			_return.setFunctionExecutionStatus(statusType);
            		}else if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
              			dataType.setSubjectIdentifier("8.1.1");
              			dataType.setSubject("EID");
              			dataType.setReason("Unknown");
              			dataType.setMessage("Indicates that the EID, is unknown to the function provider");
              			statusType.setStatus(StatusType.FAILED);
              			statusType.setStatusCodeData(dataType);
              			_return.setFunctionExecutionStatus(statusType);
              		}else{
            			dataType.setSubjectIdentifier("8.9.0");
            			dataType.setReason("Other error");
            			dataType.setMessage("UnStandard error");
            			statusType.setStatus(StatusType.FAILED);
            			_return.setFunctionExecutionStatus(statusType);
            		}
            		return _return;
            	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     * 获取EIS
     * @param parameters
     * @return
     * @throws Exception
     */
    private String getEIS(ES2GetEISRequest parameters) throws Exception {
    	byte[] msgBype = null;
    	try {
    		MsgHeader header = new MsgHeader("getEISByDp");
        	ES2GetEISReqBody requestBody = new ES2GetEISReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	msgBype = BaseHttp.doPostByDp(json);
        	System.out.println(new String(msgBype));
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}
    	
    	return new String(msgBype);
    	
    }


    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES2Mno#es2UpdateSubscriptionAddress(com.whty.efs.webservice.es.message.ES2UpdateSubscriptionAddressRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES2UpdateSubscriptionAddressResponse es2UpdateSubscriptionAddress(ES2UpdateSubscriptionAddressRequest parameters) { 
        LOG.info("Executing operation es2UpdateSubscriptionAddress");
        com.whty.efs.webservice.es.message.ES2UpdateSubscriptionAddressResponse _return = new ES2UpdateSubscriptionAddressResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	EuiccCard card = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
        	if (card == null) {
        		throw new EuiccBusiException("8.1.1", "EID Unknown");
        	}else if (StringUtils.isBlank(card.getSmsrId())) {
        		throw new EuiccBusiException("8.7", "SM-SR Unknown");
        	}
    		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
    		if (profile == null) {
    			throw new EuiccBusiException("8.2.1", "ICCID Unknown");
    		}
        	updateSubscriAddress(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
          	  if(StringUtils.equals(ex.getMessage(), "SM-SR Unknown")){
          			dataType.setSubjectIdentifier("8.7");
          			dataType.setSubject("SM-SR");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the SM-SR, identified by this smsr-id, is unknown to or whose address cannot be resolved by the SM-SR");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
          			dataType.setSubjectIdentifier("8.1.1");
          			dataType.setSubject("EID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the function provider.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "ICCID Unknown")){
          			dataType.setSubjectIdentifier("8.2.1");
          			dataType.setSubject("ICCID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the function provider.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else{
          			dataType.setSubjectIdentifier("8.9.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
          			_return.setFunctionExecutionStatus(statusType);
          		}
          		return _return;
          	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     *调用DP更新策略规则
     * @param parameters
     * @return
     * @throws Exception
     */
    private void updateSubscriAddress(ES2UpdateSubscriptionAddressRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("updateSubscriAddrByDp");
        	ES2UpdateSubscriAddrReqBody requestBody = new ES2UpdateSubscriAddrReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	requestBody.setImsi(parameters.getNewSubscriptionAddress().getImsi());
        	requestBody.setMsisdn(parameters.getNewSubscriptionAddress().getMsisdn());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostByDp(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    }
    
    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES2Mno#es2DeleteProfile(com.whty.efs.webservice.es.message.ES2DeleteProfileRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES2DeleteProfileResponse es2DeleteProfile(ES2DeleteProfileRequest parameters) { 
        LOG.info("Executing operation es2DeleteProfile");
        com.whty.efs.webservice.es.message.ES2DeleteProfileResponse _return = new ES2DeleteProfileResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	EuiccCard card = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
        	if (StringUtils.isBlank(card.getSmsrId())) {
				throw new EuiccBusiException("8.7", "SM-SR Unknown");
			}
        	deleteProfile(parameters);
           
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "SM-SR Unknown")){
        			dataType.setSubjectIdentifier("8.7");
        			dataType.setSubject("SM-SR");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the SM-SR, identified by this smsr-id, is unknown to or whose address cannot be resolved by the SM-SR");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "SM-SR is not responsible for the euicc card!")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Invalid destination")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Invalid destination");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is known to the SM-SR but installed on another eUICC than the one identified by the function caller.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Not Allowed")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Not Allowed");
        			dataType.setMessage("Indicates that the function caller is not allowed to perform this function on the target Profile.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "POL1 of the Profile prevents deletion")){
        			dataType.setSubjectIdentifier("8.2.2");
        			dataType.setSubject("POL1");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL1 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "The target Profile POL2 Policy does not allowed delete")){
        			dataType.setSubjectIdentifier("8.2.3");
        			dataType.setSubject("POL2");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL2 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			dataType.setSubjectIdentifier("8.9.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     * 调用DP删除profile
     * 
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage deleteProfile(ES2DeleteProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("profileDeletionByDp");
    		ES2DeleteProfileReqBody requestBody = new ES2DeleteProfileReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostByDp(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}    	
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES2Mno#es2UpdatePolicyRules(com.whty.efs.webservice.es.message.ES2UpdatePolicyRulesRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES2UpdatePolicyRulesResponse es2UpdatePolicyRules(ES2UpdatePolicyRulesRequest parameters) { 
        LOG.info("Executing operation es2UpdatePolicyRules");
        com.whty.efs.webservice.es.message.ES2UpdatePolicyRulesResponse _return = new ES2UpdatePolicyRulesResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	
        	checkPOL2InitialConditions(parameters);
        	updatePOL(parameters);
           
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Invalid destination")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Invalid destination");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is known to the SM-SR but installed on another eUICC than the one identified by the function caller.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "SM-SR Unknown")){
        			dataType.setSubjectIdentifier("8.7");
        			dataType.setSubject("SM-SR");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the SM-SR, identified by this smsr-id, is unknown to or whose address cannot be resolved by the SM-SR");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "POL2 Invalid")){
          			dataType.setSubjectIdentifier("8.2.3");
          			dataType.setSubject("POL2");
          			dataType.setReason("Invalid");
          			dataType.setMessage("Indicates that the POL2 is invalid.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else{
        			dataType.setSubjectIdentifier("8.9.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        
    }
    
    /**
     * 检查策略规则初始条件
     * @param parameters
     */
     private void checkPOL2InitialConditions(ES2UpdatePolicyRulesRequest parameters) {
 		//TODO:关于Profile ICCID Not Allowed，涉及权限及认证问题，由谁决定？？
 		EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
 		if (euiccCard == null) {
 			throw new EuiccBusiException("8.1.1", "EID Unknown");
 		}else if (StringUtils.isBlank(euiccCard.getSmsrId())) {
			throw new EuiccBusiException("8.7", "SM-SR Unknown");
		}
 		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
 		if (profile == null) {
 			throw new EuiccBusiException("8.2.1", "Profile ICCID Unknown");
 		}else if (StringUtils.isNotBlank(profile.getIsdPAid()) && !StringUtils.equals(profile.getEid(), new String(parameters.getEid()))) {
 			throw new EuiccBusiException("8.2.1", "Profile ICCID Invalid destination");
 		}
 	}
    /**
     * 调用DP更新策略规则
     * @param parameters
     * @return
     * @throws Exception
     * TODO:POL2 rules
     */
    private RespMessage updatePOL(ES2UpdatePolicyRulesRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	ES2UpdatePolicyRuleReqBody requestBody = new ES2UpdatePolicyRuleReqBody();
    	try {
    		POL2Type pol2Rules = parsePOL2(parameters);
        	MsgHeader header = new MsgHeader("updatePolicyRulesByDP");
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	requestBody.setSmSrId(parameters.getSmsrId());
        	requestBody.setPol2Rules(pol2Rules);
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostByDp(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("2020", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }
    
    /**
     * 处理pol2
     * @param parameters
     * @return
     */
   
    private POL2Type parsePOL2(ES2UpdatePolicyRulesRequest parameters) {
    	POL2Type pol2Type = new POL2Type();
    	List<POL2RuleType> rules = parameters.getPol2().getRule();
    	for (POL2RuleType pol2RuleType : rules) {
    		POL2RuleSubjectType subjectType = pol2RuleType.getSubject();
    		POL2RuleActionType actionType =  pol2RuleType.getAction();
    		POL2RuleQualificationType qualificationType = pol2RuleType.getQualification();
    		if ((subjectType == null) && (actionType == null) && (qualificationType == null)) { 
    			pol2Type = new POL2Type();
    			return pol2Type;
    		}
    		String subject = subjectType.name();
    		String action = actionType.name();
    		String qualification = qualificationType.name();
    		if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DISABLE")
    				&& StringUtils.equals(qualification, "NOT_ALLOWED")) {
    			pol2Type.setSubject(subject);
				pol2Type.setAction(action);
				pol2Type.setQualification("Not allowed");
			}else if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DELETE")
    				&& StringUtils.equals(qualification, "NOT_ALLOWED")) {
				pol2Type.setSubject(subject);
				pol2Type.setAction(action);
				pol2Type.setQualification("Not allowed");
				
			}else if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DISABLE")
    				&& StringUtils.equals(qualification, "AUTO_DELETE")) {
				pol2Type.setSubject(subject);
				pol2Type.setAction(action);
				pol2Type.setQualification("Auto-delete");
			}else {
				throw new EuiccBusiException("8.9.0", "POL2 Invalid");
			}
    	}
		return pol2Type;
	}


}

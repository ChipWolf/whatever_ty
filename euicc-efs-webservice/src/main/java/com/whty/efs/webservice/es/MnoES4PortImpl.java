package com.whty.efs.webservice.es;

import javax.jws.HandlerChain;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.commons.lang3.StringUtils;
import org.apache.cxf.interceptor.InInterceptors;
import org.apache.cxf.interceptor.OutInterceptors;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

import com.google.gson.Gson;
import com.whty.efs.common.bean.RespMessage;
import com.whty.efs.common.exception.ErrorCode;
import com.whty.efs.common.exception.EuiccBusiException;
import com.whty.efs.common.https.BaseHttp;
import com.whty.efs.data.pojo.EuiccCard;
import com.whty.efs.data.pojo.EuiccProfile;
import com.whty.efs.data.pojo.EuiccProfileWithBLOBs;
import com.whty.efs.data.service.IEuiccCardInfoService;
import com.whty.efs.data.service.IEuiccProfileInfoService;
import com.whty.efs.packets.message.EuiccMsg;
import com.whty.efs.packets.message.MsgHeader;
import com.whty.efs.packets.message.request.ES4DeleteProfileReqBody;
import com.whty.efs.packets.message.request.ES4DisableProfileReqBody;
import com.whty.efs.packets.message.request.ES4EnableProfileReqBody;
import com.whty.efs.packets.message.request.ES4GetEISReqBody;
import com.whty.efs.packets.message.request.ES4GetStatusReqBody;
import com.whty.efs.packets.message.request.ES4PrepareChangeReqBody;
import com.whty.efs.packets.message.request.ES4SmsrChangeReqBody;
import com.whty.efs.packets.message.request.ES4UpdatePolicyRuleReqBody;
import com.whty.efs.packets.message.request.ES4UpdateSubscriAddrReqBody;
import com.whty.efs.packets.message.request.POL2Type;
import com.whty.efs.webservice.es.message.EISType;
import com.whty.efs.webservice.es.message.ES4AuditEISRequest;
import com.whty.efs.webservice.es.message.ES4AuditEISResponse;
import com.whty.efs.webservice.es.message.ES4DeleteProfileRequest;
import com.whty.efs.webservice.es.message.ES4DeleteProfileResponse;
import com.whty.efs.webservice.es.message.ES4DisableProfileRequest;
import com.whty.efs.webservice.es.message.ES4DisableProfileResponse;
import com.whty.efs.webservice.es.message.ES4EnableProfileRequest;
import com.whty.efs.webservice.es.message.ES4EnableProfileResponse;
import com.whty.efs.webservice.es.message.ES4GetEISRequest;
import com.whty.efs.webservice.es.message.ES4GetEISResponse;
import com.whty.efs.webservice.es.message.ES4Mno;
import com.whty.efs.webservice.es.message.ES4PrepareSMSRChangeRequest;
import com.whty.efs.webservice.es.message.ES4PrepareSMSRChangeResponse;
import com.whty.efs.webservice.es.message.ES4SMSRChangeRequest;
import com.whty.efs.webservice.es.message.ES4SMSRChangeResponse;
import com.whty.efs.webservice.es.message.ES4UpdatePolicyRulesRequest;
import com.whty.efs.webservice.es.message.ES4UpdatePolicyRulesResponse;
import com.whty.efs.webservice.es.message.ES4UpdateSubscriptionAddressRequest;
import com.whty.efs.webservice.es.message.ES4UpdateSubscriptionAddressResponse;
import com.whty.efs.webservice.es.message.ExecutionStatusType;
import com.whty.efs.webservice.es.message.POL2RuleActionType;
import com.whty.efs.webservice.es.message.POL2RuleQualificationType;
import com.whty.efs.webservice.es.message.POL2RuleSubjectType;
import com.whty.efs.webservice.es.message.POL2RuleType;
import com.whty.efs.webservice.es.message.StatusCodeDataType;
import com.whty.efs.webservice.es.message.StatusType;

import java.math.BigInteger;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Logger;

/**
 * This class was generated by Apache CXF 3.1.7
 * 2016-10-26T17:12:40.275+08:00
 * Generated source version: 3.1.7
 * 
 */
@javax.jws.WebService(
        serviceName = "ES4MnoService",
        portName = "MnoES4Port",
        targetNamespace = "http://namespaces.gsma.org/esim-messaging/3",
        wsdlLocation = "WebServicesAPI/ES4_MNO.wsdl",
        endpointInterface = "com.whty.efs.webservice.es.message.ES4Mno")
@HandlerChain(file="/ws/chain/es-handler-chain.xml")
@InInterceptors(interceptors="org.apache.cxf.interceptor.LoggingInInterceptor")
@OutInterceptors(interceptors="com.whty.efs.webservice.interceptor.ESOutInterceptor") 
public class MnoES4PortImpl implements ES4Mno {
	private static final Logger LOG = Logger.getLogger(MnoES4PortImpl.class.getName());

	@Autowired
	IEuiccCardInfoService euiccCardInfoService;
	@Autowired
	IEuiccProfileInfoService euiccProfileInfoService;

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4GetEIS(com.whty.efs.webservice.es.message.ES4GetEISRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4GetEISResponse es4GetEIS(ES4GetEISRequest parameters) { 
        LOG.info("Executing operation es4GetEIS");
        com.whty.efs.webservice.es.message.ES4GetEISResponse _return = new ES4GetEISResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
    		if (euiccCard == null) {
    			throw new EuiccBusiException("8.1.1", "EID Unknown");
    		}
    		//TODO:EIS Not Allowed 涉及权限问题，如何确定
        	String resultEis = getEIS(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            _return.setEis(new Gson().fromJson(resultEis,EISType.class));//eis 信息不完善
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
          			dataType.setSubjectIdentifier("8.1.1");
          			dataType.setSubject("EID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the EID, is unknown to the function provider");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "EIS Not Allowed")){
          			dataType.setSubjectIdentifier("8.6");
          			dataType.setSubject("EIS");
          			dataType.setReason("Not Allowed");
          			dataType.setMessage("Function requester is not allowed to manage this EIS, identified by this EID.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else{
          			dataType.setSubjectIdentifier("8.10.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
          			statusType.setStatus(StatusType.FAILED);
          			_return.setFunctionExecutionStatus(statusType);
          		}
          		return _return;
          	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     * 调用SR获得EIS
     * @param parameters
     * @return
     * @throws Exception
     */
    private String getEIS(ES4GetEISRequest parameters) throws Exception{
    	byte[] msgBype = null;
    	try {
    		MsgHeader header = new MsgHeader("retrieveEISBySr");
        	ES4GetEISReqBody requestBody = new ES4GetEISReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	EuiccMsg euiccMsg = new EuiccMsg(header,requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	msgBype = BaseHttp.doPostBySr(json);
        	System.out.println(new String(msgBype));
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    	
    	return new String(msgBype);
    }
    
    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4DeleteProfile(com.whty.efs.webservice.es.message.ES4DeleteProfileRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4DeleteProfileResponse es4DeleteProfile(ES4DeleteProfileRequest parameters) { 
        LOG.info("Executing operation es4DeleteProfile");
        com.whty.efs.webservice.es.message.ES4DeleteProfileResponse _return = new ES4DeleteProfileResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	checkDeletIniCondit(parameters);
        	RespMessage respMessage = deleteProfile(parameters);
           
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
           
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            _return.setEuiccResponseData(respMessage.getCode().getBytes());
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Invalid destination")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Invalid destination");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is known to the SM-SR but installed on another eUICC than the one identified by the function caller.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Not Allowed")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Not Allowed");
        			dataType.setMessage("Indicates that the function caller is not allowed to perform this function on the target Profile.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "POL1 of the Profile prevents deletion")){
        			dataType.setSubjectIdentifier("8.2.2");
        			dataType.setSubject("POL1");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL1 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "The target Profile POL2 Policy does not allowed delete")){
        			dataType.setSubjectIdentifier("8.2.3");
        			dataType.setSubject("POL2");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL2 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "ISD-R Execution error")){
        			dataType.setSubjectIdentifier("8.4");
        			dataType.setSubject("ISD-R");
        			dataType.setReason("Execution error");
        			dataType.setMessage("Error during execution of the enabling command on the eUICC.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			dataType.setSubjectIdentifier("8.10.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     * 调用SR删除profile
     * 调用SR时需要设置flag标志是否为出错处理，此处为false表示并不是出错处理
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage deleteProfile(ES4DeleteProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("deleteProfileByHttps");
        	ES4DeleteProfileReqBody requestBody = new ES4DeleteProfileReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	requestBody.setErrorDeal(false);
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostBySr(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }
    /**
     * 检查删除初始条件
     * @param parameters
     */
    private void checkDeletIniCondit(ES4DeleteProfileRequest parameters) {
		EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
		if (euiccCard == null) {
			throw new EuiccBusiException("8.1.1", "EID Unknown");
		}
		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
		if (profile == null) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Unknown");
		}else if (StringUtils.isNotBlank(profile.getIsdPAid()) && !StringUtils.equals(profile.getEid(), new String(parameters.getEid()))) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Invalid destination");
		}
		//TODO:Profile ICCID Not Allowed
	}

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4SMSRChange(com.whty.efs.webservice.es.message.ES4SMSRChangeRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4SMSRChangeResponse es4SMSRChange(ES4SMSRChangeRequest parameters) { 
        LOG.info("Executing operation es4SMSRChange");
        com.whty.efs.webservice.es.message.ES4SMSRChangeResponse _return = new ES4SMSRChangeResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
    		if (euiccCard == null) {
    			throw new EuiccBusiException("8.1.1", "EID Unknown");
    		}
    		//TODO:ICCID Not Allowed 涉及权限问题，如何确定?
        	smsrChange(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
          	  if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
          			dataType.setSubjectIdentifier("8.1.1");
          			dataType.setSubject("EID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the EID , is unknown to the function provider.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "eUICC Not Allowed")){
          			dataType.setSubjectIdentifier("8.1");
          			dataType.setSubject("eUICC");
          			dataType.setReason("Not Allowed");
          			dataType.setMessage("Function requester is not allowed to manage the eUICC.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "ISD-R Execution error")){
          			dataType.setSubjectIdentifier("8.4");
          			dataType.setSubject("ISD-R");
          			dataType.setReason("Execution error");
          			dataType.setMessage("Error during the creation of a new key set at the ISD-R level.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "eUICC Certificate Authority Certification Certificate Expired")){
          			dataType.setSubjectIdentifier("8.5.2");
          			dataType.setSubject("eUICC Certificate Authority Certification");
          			dataType.setReason("Certificate Expired");
          			dataType.setMessage("ECASD Certificate Expired.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else{
          			dataType.setSubjectIdentifier("8.10.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
          			statusType.setStatus(StatusType.FAILED);
          			_return.setFunctionExecutionStatus(statusType);
          		}
          		return _return;
          	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    
    /**
     * 发起sm-sr change请求
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage smsrChange(ES4SMSRChangeRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("srChangeSend");
        	ES4SmsrChangeReqBody requestBody = new ES4SmsrChangeReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setTargetSmsrId(parameters.getTargetSmsrId());//目标SM-SR id
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostBySr(json);
        	 respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4AuditEIS(com.whty.efs.webservice.es.message.ES4AuditEISRequest parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4AuditEISResponse es4AuditEIS(ES4AuditEISRequest parameters) { 
        LOG.info("Executing operation es4AuditEIS");
        com.whty.efs.webservice.es.message.ES4AuditEISResponse _return = new ES4AuditEISResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
    		if (euiccCard == null) {
    			throw new EuiccBusiException("8.1.1", "EID Unknown");
    		}
    		//TODO:profile not allowed, eis not allowed 权限问题
        	String resultEIS = getStatus(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            _return.setEis(new Gson().fromJson(resultEIS, EISType.class));
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
          			dataType.setSubjectIdentifier("8.1.1");
          			dataType.setSubject("EID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the function provider.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "Profile  Not Allowed")){
          			dataType.setSubjectIdentifier("8.2");
          			dataType.setSubject("Profile");
          			dataType.setReason("Not Allowed");
          			dataType.setMessage("One or more Profiles identified by ICCIDs in the list do not belong to function requester.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "EIS Not Allowed")){
          			dataType.setSubjectIdentifier("8.6");
          			dataType.setSubject("EIS");
          			dataType.setReason("Not Allowed");
          			dataType.setMessage("Function requester is not allowed to manage this EIS, identified by this EID.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "Function Delivered With No Response")){
          			dataType.setSubjectIdentifier("1.6");
          			dataType.setSubject("Function");
          			dataType.setReason("Delivered With No Response");
          			dataType.setMessage("The function execution request has been delivered to the remote entity but no response is received.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else{
          			dataType.setSubjectIdentifier("8.10.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
          			statusType.setStatus(StatusType.FAILED);
          			_return.setFunctionExecutionStatus(statusType);
          		}
          		return _return;
          	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     * 查询并更新profile状态
     * @param parameters
     * @return
     * @throws Exception
     */
    private String getStatus(ES4AuditEISRequest parameters) throws Exception {
    	byte[] msgBype = null;
    	try {
    		MsgHeader header = new MsgHeader("getStatusByHttps");
        	ES4GetStatusReqBody requestBody = new ES4GetStatusReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccidList(parameters.getIccid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	msgBype = BaseHttp.doPostBySr(json);
            System.out.println(new String(msgBype));
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    	
    	
    	return new String(msgBype);
    }
    

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4PrepareSMSRChange(com.whty.efs.webservice.es.message.ES4PrepareSMSRChangeRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4PrepareSMSRChangeResponse es4PrepareSMSRChange(ES4PrepareSMSRChangeRequest parameters) { 
        LOG.info("Executing operation es4PrepareSMSRChange");
        com.whty.efs.webservice.es.message.ES4PrepareSMSRChangeResponse _return = new ES4PrepareSMSRChangeResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	prepareSmsrChange(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
           
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
            	  if(StringUtils.equals(ex.getMessage(), "Function Provider Condition Of Use Not satisfied")){
            			dataType.setSubjectIdentifier("1.2");
            			dataType.setSubject("Function Provider");
            			dataType.setReason("Condition Of Use Not satisfied");
            			dataType.setMessage("Indicates that function provider is not capable of managing the eUICC identified by this EID.");
            			statusType.setStatus(StatusType.FAILED);
            			statusType.setStatusCodeData(dataType);
            			_return.setFunctionExecutionStatus(statusType);
            		}else if (StringUtils.equals(((EuiccBusiException) ex).getCode(),"0101")) {
						dataType.setSubjectIdentifier("1.2");
						dataType.setSubject("Function Provider");
            			dataType.setReason("Condition Of Use Not satisfied");
            			dataType.setMessage("Indicates that function provider is not capable of managing the eUICC identified by this EID.");
            			statusType.setStatus(StatusType.FAILED);
            			statusType.setStatusCodeData(dataType);
            			_return.setFunctionExecutionStatus(statusType);
					}else{
						dataType.setSubjectIdentifier("8.10.0");
	        			dataType.setReason("Other error");
	        			dataType.setMessage("UnStandard error");
            			statusType.setStatus(StatusType.FAILED);
            			_return.setFunctionExecutionStatus(statusType);
            		}
            		return _return;
            	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    
    private RespMessage prepareSmsrChange(ES4PrepareSMSRChangeRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("prepareSmsrChange");
        	ES4PrepareChangeReqBody requestBody = new ES4PrepareChangeReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setCurrentSmsrId(parameters.getCurrentSMSRid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostBySr(json);
        	 respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4UpdateSubscriptionAddress(com.whty.efs.webservice.es.message.ES4UpdateSubscriptionAddressRequest parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4UpdateSubscriptionAddressResponse es4UpdateSubscriptionAddress(ES4UpdateSubscriptionAddressRequest parameters) { 
        LOG.info("Executing operation es4UpdateSubscriptionAddress");
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        com.whty.efs.webservice.es.message.ES4UpdateSubscriptionAddressResponse _return = new ES4UpdateSubscriptionAddressResponse();
        try {
        	EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
    		if (euiccCard == null) {
    			throw new EuiccBusiException("8.1.1", "EID Unknown");
    		}
    		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
    		if (profile == null) {
    			throw new EuiccBusiException("8.2.1", "ICCID Unknown");
    		}
    		//TODO:Subscription Address Not Allowed 涉及权限问题，待处理
        	updateSubScriAddr(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
           
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
          			dataType.setSubjectIdentifier("8.1.1");
          			dataType.setSubject("EID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the function provider.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "ICCID Unknown")){
          			dataType.setSubjectIdentifier("8.2.1");
          			dataType.setSubject("ICCID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the function provider.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), " Subscription Address Not Allowed")){
          			dataType.setSubjectIdentifier("8.2.6");
          			dataType.setSubject("Subscription Address");
          			dataType.setReason("Not Allowed");
          			dataType.setMessage("Function requester is not allowed to manage the Subscription Address.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else{
          			dataType.setSubjectIdentifier("8.10.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
          			statusType.setStatus(StatusType.FAILED);
          			_return.setFunctionExecutionStatus(statusType);
          		}
          		return _return;
          	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     * 调用SR更新订阅地址
     * @param parameters
     * @throws Exception
     */
    private RespMessage updateSubScriAddr(ES4UpdateSubscriptionAddressRequest parameters) throws Exception{
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("updateSubscriAddrBySr");
        	ES4UpdateSubscriAddrReqBody requestBody = new ES4UpdateSubscriAddrReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	requestBody.setImsi(parameters.getNewSubscriptionAddress().getImsi());
        	requestBody.setMsisdn(parameters.getNewSubscriptionAddress().getMsisdn());
        	EuiccMsg euiccMsg = new EuiccMsg(header,requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostBySr(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }
    

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4EnableProfile(com.whty.efs.webservice.es.message.ES4EnableProfileRequest parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4EnableProfileResponse es4EnableProfile(ES4EnableProfileRequest parameters) { 
        LOG.info("Executing operation es4EnableProfile");
        com.whty.efs.webservice.es.message.ES4EnableProfileResponse _return = new ES4EnableProfileResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	checkEnaInitialConditions(parameters);
        	RespMessage respMessage = enableProfile(parameters);
           
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
           
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            _return.setEuiccResponseData(respMessage.getCode().getBytes());
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Invalid destination")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Invalid destination");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is known to the SM-SR but installed on another eUICC than the one identified by the function caller.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Not Allowed")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Not Allowed");
        			dataType.setMessage("Indicates that the function caller is not allowed to perform this function on the target Profile.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "POL1 of the currently Enabled Profile prevents this action")){
        			dataType.setSubjectIdentifier("8.2.2");
        			dataType.setSubject("POL1");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL1 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "The current Profile POL2 Policy does not allowed disable")){
        			dataType.setSubjectIdentifier("8.2.3");
        			dataType.setSubject("POL2");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL2 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "ISD-R Execution error")){
        			dataType.setSubjectIdentifier("8.4");
        			dataType.setSubject("ISD-R");
        			dataType.setReason("Execution error");
        			dataType.setMessage("Error during execution of the enabling command on the eUICC.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			dataType.setSubjectIdentifier("8.10.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     * 调用SR启用profile
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage enableProfile(ES4EnableProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("enableProfileByHttps");
        	ES4EnableProfileReqBody requestBody = new ES4EnableProfileReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostBySr(json);
        	 respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }
   /**
    * 检查启用初始条件
    * @param parameters
    */
    private void checkEnaInitialConditions(ES4EnableProfileRequest parameters) {
		//TODO:关于Profile ICCID Not Allowed，涉及权限及认证问题，由谁决定？？
		EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
		if (euiccCard == null) {
			throw new EuiccBusiException("8.1.1", "EID Unknown");
		}
		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
		if (profile == null) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Unknown");
		}else if (StringUtils.isNotBlank(profile.getIsdPAid()) && !StringUtils.equals(profile.getEid(), new String(parameters.getEid()))) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Invalid destination");
		}
	}

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4DisableProfile(com.whty.efs.webservice.es.message.ES4DisableProfileRequest parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4DisableProfileResponse es4DisableProfile(ES4DisableProfileRequest parameters) { 
        LOG.info("Executing operation es4DisableProfile");
        com.whty.efs.webservice.es.message.ES4DisableProfileResponse _return = new ES4DisableProfileResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
        statusType.setStatusCodeData(dataType);
        try {
        	checkDisaIniCondit(parameters);
        	RespMessage respMessage = disableProfile(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            _return.setEuiccResponseData(respMessage.getCode().getBytes());
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "eUICC Refused")){
        			dataType.setSubjectIdentifier("8.1");
        			dataType.setSubject("eUICC");
        			dataType.setReason("Refused");
        			dataType.setMessage("Indicates that the target Profile can’t be disabled.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Unknown");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the SM-SR.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Invalid destination")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Invalid destination");
        			dataType.setMessage("Indicates that the Profile identified by this ICCID is known to the SM-SR but installed on another eUICC than the one identified by the function caller.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Not Allowed")){
        			dataType.setSubjectIdentifier("8.2.1");
        			dataType.setSubject("Profile ICCID");
        			dataType.setReason("Not Allowed");
        			dataType.setMessage("Indicates that the function caller is not allowed to perform this function on the target Profile.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "POL1 of the Profile prevents disabling")){
        			dataType.setSubjectIdentifier("8.2.2");
        			dataType.setSubject("POL1");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL1 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "The target Profile POL2 Policy does not allowed disable")){
        			dataType.setSubjectIdentifier("8.2.3");
        			dataType.setSubject("POL2");
        			dataType.setReason("Refused");
        			dataType.setMessage("The POL2 of the target Profile doesn’t allow this operation.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "ISD-R Execution error")){
        			dataType.setSubjectIdentifier("8.4");
        			dataType.setSubject("ISD-R");
        			dataType.setReason("Execution error");
        			dataType.setMessage("Error during execution of the enabling command on the eUICC.");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			dataType.setSubjectIdentifier("8.10.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    /**
     * 调用SR禁用profile
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage disableProfile(ES4DisableProfileRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		MsgHeader header = new MsgHeader("disableProfileByHttps");
        	ES4DisableProfileReqBody requestBody = new ES4DisableProfileReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostBySr(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }
    /**
     * 检查禁用初始条件
     * @param parameters
     */
    private void checkDisaIniCondit(ES4DisableProfileRequest parameters) {
		List<EuiccProfileWithBLOBs> profileList = euiccProfileInfoService.selectByEid(new String(parameters.getEid()));
		if (profileList.size() == 1) {
			throw new EuiccBusiException("8.1", "eUICC Refused");
		}
		EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
		if (euiccCard == null) {
			throw new EuiccBusiException("8.1.1", "EID Unknown");
		}
		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
		if (profile == null) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Unknown");
		}else if (StringUtils.isNotBlank(profile.getIsdPAid()) && !StringUtils.equals(profile.getEid(), new String(parameters.getEid()))) {
			throw new EuiccBusiException("8.2.1", "Profile ICCID Invalid destination");
		}
		//TODO:Profile ICCID Not Allowed
	}

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES4Mno#es4UpdatePolicyRules(com.whty.efs.webservice.es.message.ES4UpdatePolicyRulesRequest parameters)*
     */
    public com.whty.efs.webservice.es.message.ES4UpdatePolicyRulesResponse es4UpdatePolicyRules(ES4UpdatePolicyRulesRequest parameters) { 
       LOG.info("Executing operation es4UpdatePolicyRules");
       com.whty.efs.webservice.es.message.ES4UpdatePolicyRulesResponse _return = new ES4UpdatePolicyRulesResponse();
       ExecutionStatusType statusType = new ExecutionStatusType();
       StatusCodeDataType dataType = new StatusCodeDataType();
       statusType.setStatus(StatusType.EXECUTED_SUCCESS);
       statusType.setStatusCodeData(dataType);
        try {
        	checkPOL2InitialConditions(parameters);
        	updatePOL(parameters);
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
          			dataType.setSubjectIdentifier("8.1.1");
          			dataType.setSubject("EID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the eUICC, identified by this EID, is unknown to the function provider.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Unknown")){
          			dataType.setSubjectIdentifier("8.2.1");
          			dataType.setSubject("Profile ICCID");
          			dataType.setReason("Unknown");
          			dataType.setMessage("Indicates that the Profile identified by this ICCID is unknown to the function provider.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "Profile ICCID Invalid destination")){
          			dataType.setSubjectIdentifier("8.2.1");
          			dataType.setSubject("Profile ICCID");
          			dataType.setReason("Invalid destination");
          			dataType.setMessage("Indicates that the Profile identified by this ICCID is known to the function provider but installed on another eUICC than the one identified by the function caller.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else if(StringUtils.equals(ex.getMessage(), "POL2 Invalid")){
          			dataType.setSubjectIdentifier("8.2.3");
          			dataType.setSubject("POL2");
          			dataType.setReason("Invalid");
          			dataType.setMessage("Indicates that the POL2 is invalid.");
          			statusType.setStatus(StatusType.FAILED);
          			statusType.setStatusCodeData(dataType);
          			_return.setFunctionExecutionStatus(statusType);
          		}else{
          			dataType.setSubjectIdentifier("8.10.0");
        			dataType.setReason("Other error");
        			dataType.setMessage("UnStandard error");
          			statusType.setStatus(StatusType.FAILED);
          			_return.setFunctionExecutionStatus(statusType);
          		}
          		return _return;
          	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    
    /**
     * 检查策略规则初始条件
     * @param parameters
     */
     private void checkPOL2InitialConditions(ES4UpdatePolicyRulesRequest parameters) {
 		//TODO:关于Profile ICCID Not Allowed，涉及权限及认证问题，由谁决定？？
 		EuiccCard euiccCard = euiccCardInfoService.selectByPrimaryKey(new String(parameters.getEid()));
 		if (euiccCard == null) {
 			throw new EuiccBusiException("8.1.1", "EID Unknown");
 		}
 		EuiccProfile profile = euiccProfileInfoService.selectByIccid(parameters.getIccid());
 		if (profile == null) {
 			throw new EuiccBusiException("8.2.1", "Profile ICCID Unknown");
 		}else if (StringUtils.isNotBlank(profile.getIsdPAid()) && !StringUtils.equals(profile.getEid(), new String(parameters.getEid()))) {
 			throw new EuiccBusiException("8.2.1", "Profile ICCID Invalid destination");
 		}
 	}
    /**
     * 调用SR更新策略规则
     * 
     * @param parameters
     * @return
     * @throws Exception
     */
    private RespMessage  updatePOL(ES4UpdatePolicyRulesRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try {
    		POL2Type pol2Rules = parsePOL2(parameters);
        	MsgHeader header = new MsgHeader("updatePolicyRules");
        	ES4UpdatePolicyRuleReqBody requestBody = new ES4UpdatePolicyRuleReqBody();
        	requestBody.setEid(new String(parameters.getEid()));
        	requestBody.setIccid(parameters.getIccid());
        	requestBody.setPol2Rules(pol2Rules);
        	EuiccMsg euiccMsg = new EuiccMsg(header, requestBody);
        	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
        	byte[] msgBype = BaseHttp.doPostBySr(json);
        	respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		} catch (Exception e) {
			throw new EuiccBusiException("4040", e.getMessage());
		}
    	
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return respMessage;
    }
    /**
     * 处理pol2
     * @param parameters
     * @return
     */
    private POL2Type parsePOL2(ES4UpdatePolicyRulesRequest parameters) {
    	POL2Type pol2Type = new POL2Type();
    	List<POL2RuleType> rules = parameters.getPol2().getRule();
    	for (POL2RuleType pol2RuleType : rules) {
    		POL2RuleSubjectType subjectType = pol2RuleType.getSubject();
    		POL2RuleActionType actionType =  pol2RuleType.getAction();
    		POL2RuleQualificationType qualificationType = pol2RuleType.getQualification();
    		if ((subjectType == null) && (actionType == null) && (qualificationType == null)) { 
    			pol2Type = new POL2Type();
    			return pol2Type;
    		}
    		
    		String subject = subjectType.name();
    		String action = actionType.name();
    		String qualification = qualificationType.name();
    		if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DISABLE")
    				&& StringUtils.equals(qualification, "NOT_ALLOWED")) {
				pol2Type.setSubject(subject);
				pol2Type.setAction(action);
				pol2Type.setQualification("Not allowed");
			}else if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DELETE")
    				&& StringUtils.equals(qualification, "NOT_ALLOWED")) {
				pol2Type.setSubject(subject);
				pol2Type.setAction(action);
				pol2Type.setQualification("Not allowed");
				
			}else if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DISABLE")
    				&& StringUtils.equals(qualification, "AUTO_DELETE")) {
				pol2Type.setSubject(subject);
				pol2Type.setAction(action);
				pol2Type.setQualification("Auto-delete");
			}else {
				throw new EuiccBusiException("8.2.3", "POL2 Invalid");
			}
    	}
		return pol2Type;
	}


	

}

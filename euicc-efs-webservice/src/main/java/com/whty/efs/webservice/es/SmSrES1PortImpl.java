
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.whty.efs.webservice.es;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.UUID;
import java.util.logging.Logger;

import javax.jws.HandlerChain;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.commons.lang3.StringUtils;
import org.apache.cxf.interceptor.InInterceptors;
import org.apache.cxf.interceptor.OutInterceptors;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.gson.Gson;
import com.whty.efs.data.pojo.EIS;
import com.whty.efs.data.pojo.EuiccAuditTrailRecord;
import com.whty.efs.data.pojo.EuiccCanonicalizationMethodType;
import com.whty.efs.data.pojo.EuiccCapabilities;
import com.whty.efs.data.pojo.EuiccCard;
import com.whty.efs.data.pojo.EuiccDigestMethodType;
import com.whty.efs.data.pojo.EuiccEcasd;
import com.whty.efs.data.pojo.EuiccEcasdKeyset;
import com.whty.efs.data.pojo.EuiccEcasdTar;
import com.whty.efs.data.pojo.EuiccEumSignature;
import com.whty.efs.data.pojo.EuiccExecutionStatusType;
import com.whty.efs.data.pojo.EuiccIsdR;
import com.whty.efs.data.pojo.EuiccIsdrKeyset;
import com.whty.efs.data.pojo.EuiccIsdrTar;
import com.whty.efs.data.pojo.EuiccKeyInfoType;
import com.whty.efs.data.pojo.EuiccObjectType;
import com.whty.efs.data.pojo.EuiccPol2;
import com.whty.efs.data.pojo.EuiccProfileWithBLOBs;
import com.whty.efs.data.pojo.EuiccPropertyType;
import com.whty.efs.data.pojo.EuiccReferenceTransformType;
import com.whty.efs.data.pojo.EuiccReferenceType;
import com.whty.efs.data.pojo.EuiccRetrievalMethodType;
import com.whty.efs.data.pojo.EuiccRetrievalTransformType;
import com.whty.efs.data.pojo.EuiccSignedInfoType;
import com.whty.efs.data.service.ES1RegisterEISService;
import com.whty.efs.webservice.es.message.AuditTrailRecordType;
import com.whty.efs.webservice.es.message.CanonicalizationMethodType;
import com.whty.efs.webservice.es.message.DSAKeyValueType;
import com.whty.efs.webservice.es.message.DigestMethodType;
import com.whty.efs.webservice.es.message.EISType;
import com.whty.efs.webservice.es.message.EISType.EumSignedInfo;
import com.whty.efs.webservice.es.message.EISType.ProfileInfo;
import com.whty.efs.webservice.es.message.ES1RegisterEISRequest;
import com.whty.efs.webservice.es.message.ES1RegisterEISResponse;
import com.whty.efs.webservice.es.message.ES1SmSr;
import com.whty.efs.webservice.es.message.ExecutionStatusType;
import com.whty.efs.webservice.es.message.KeyInfoType;
import com.whty.efs.webservice.es.message.KeyValueType;
import com.whty.efs.webservice.es.message.ObjectType;
import com.whty.efs.webservice.es.message.PGPDataType;
import com.whty.efs.webservice.es.message.POL2RuleType;
import com.whty.efs.webservice.es.message.POL2Type;
import com.whty.efs.webservice.es.message.PropertyType;
import com.whty.efs.webservice.es.message.RSAKeyValueType;
import com.whty.efs.webservice.es.message.ReferenceType;
import com.whty.efs.webservice.es.message.RetrievalMethodType;
import com.whty.efs.webservice.es.message.SPKIDataType;
import com.whty.efs.webservice.es.message.SecurityDomainType;
import com.whty.efs.webservice.es.message.SecurityDomainType.Keyset;
import com.whty.efs.webservice.es.message.SignatureMethodType;
import com.whty.efs.webservice.es.message.SignatureType;
import com.whty.efs.webservice.es.message.SignatureValueType;
import com.whty.efs.webservice.es.message.SignedInfoType;
import com.whty.efs.webservice.es.message.StatusCodeDataType;
import com.whty.efs.webservice.es.message.StatusType;
import com.whty.efs.webservice.es.message.TransformType;
import com.whty.efs.webservice.es.message.TransformsType;
import com.whty.efs.webservice.es.message.X509DataType;
import com.whty.efs.webservice.es.message.X509IssuerSerialType;
import com.whty.efs.webservice.util.HexUtils;

/**
 * This class was generated by Apache CXF 3.1.7
 * 2016-09-08T17:55:13.037+08:00
 * Generated source version: 3.1.7
 * 
 */

@javax.jws.WebService(
                      serviceName = "ES1SmSrService",
                      portName = "SmSrES1Port",
                      targetNamespace = "http://namespaces.gsma.org/esim-messaging/3",
                      wsdlLocation = "WebServicesAPI/ES1_SMSR.wsdl",
                      endpointInterface = "com.whty.efs.webservice.es.message.ES1SmSr")
@HandlerChain(file="/ws/chain/es-handler-chain.xml")
@InInterceptors(interceptors="org.apache.cxf.interceptor.LoggingInInterceptor")
@OutInterceptors(interceptors="com.whty.efs.webservice.interceptor.ESOutInterceptor")
public class SmSrES1PortImpl implements ES1SmSr {

    private static final Logger LOG = Logger.getLogger(SmSrES1PortImpl.class.getName());
    
    @Autowired
    ES1RegisterEISService registerEISService;
    
    private List<String> pol2IdList = new ArrayList<String>();
    private String ecasdId;
    private String signatureId;
    private String rId;
    private String auditId;
    private String signedInfoId;
    private String keyInfoId;
    private String retrievalId;
    private List<String> referenceIdList = new ArrayList<String>();

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES1SmSr#es1RegisterEIS(com.whty.efs.webservice.es.message.ES1RegisterEISRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES1RegisterEISResponse es1RegisterEIS(ES1RegisterEISRequest parameters) { 
        LOG.info("Executing operation es1RegisterEIS");
        System.out.println(new Gson().toJson(parameters));
        pol2IdList.clear();
        ecasdId = null;
        signatureId = null;
        rId = null;
        auditId = null;
        signedInfoId = null;
        keyInfoId = null;
        retrievalId = null;
        referenceIdList.clear();
        registerEISService.insertEuiccCardSelective(getEIS(parameters));
        try {
            com.whty.efs.webservice.es.message.ES1RegisterEISResponse _return = new ES1RegisterEISResponse();
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            ExecutionStatusType statusType = new ExecutionStatusType();
            StatusCodeDataType dataType = new StatusCodeDataType();
            dataType.setSubject("01");
            dataType.setSubjectIdentifier("02");
            dataType.setReason("03");
            dataType.setMessage("04");
            statusType.setStatus(StatusType.EXECUTED_SUCCESS);
            statusType.setStatusCodeData(dataType);
            _return.setProcessingStart(processStart);
            _return.setProcessingEnd(processStart);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    
    /**
     * EIS信息
     * @param parameters
     * @return
     */
    private EIS getEIS(ES1RegisterEISRequest parameters) {
    	EIS eis = new EIS();
    	eis.setEuiccCard(getEuiccCard(parameters));
    	eis.setEuiccCapabilities(getEuiccCapabilities(parameters));
    	eis.setEuiccIsdR(getEuiccIsdR(parameters));
    	eis.setEuiccEcasd(getEuiccEcasd(parameters));
    	eis.setEuiccProfileList(getEuiccProfile(parameters));
    	eis.setEuiccPol2List(getEuiccPol2(parameters));
    	eis.setEuiccIsdrKeysetList(getEuiccIsdrKeyset(parameters));
    	eis.setEuiccIsdrTarList(getEuiccIsdrTar(parameters));
    	eis.setEuiccEcasdKeysetList(getEuiccEcasdKeyset(parameters));
    	eis.setEuiccEcasdTarList(getEuiccEcasdTar(parameters));
    	eis.setEuiccAuditTrailRecordList(getEuiccAuditTrailRecord(parameters));
    	eis.setEuiccExecutionStatusTypeLsit(getEuiccExecutionStatusType(parameters));
    	eis.setEuiccPropertyTypeList(getEuiccPropertyType(parameters));
    	eis.setEuiccEumSignature(getEuiccEumSignature(parameters));
    	eis.setEuiccKeyInfoType(getEuiccKeyInfoType(parameters));
    	eis.setEuiccRetrievalMethodType(getEuiccRetrievalMethodType(parameters));
    	eis.setEuiccRetrievalTransformTypeList(getEuiccRetrievalTransformType(parameters));
    	eis.setEuiccSignedInfoType(getEuiccSignedInfoType(parameters));
    	eis.setEuiccCanonicalizationMethodTypeList(getEuiccCanonicalizationMethodType(parameters));
    	eis.setEuiccReferenceTypeList(getEuiccReferenceType(parameters));
    	eis.setEuiccReferenceTransformTypeList(getEuiccReferenceTransformType(parameters));
    	eis.setEuiccDigestMethodTypeList(getEuiccDigestMethodType(parameters));
    	eis.setEuiccObjectTypeList(getEuiccObjectType(parameters));
    	return eis;
    }
    
    /**
     * 卡信息
     * @param parameters
     * @return
     */
    private EuiccCard getEuiccCard(ES1RegisterEISRequest parameters){
    	EuiccCard euiccCard = new EuiccCard();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignedInfo() == null)
    		return null;
    	EumSignedInfo eumSignedInfo = parameters.getEis().getEumSignedInfo();
		euiccCard.setEid(getEid(parameters));
    	euiccCard.setEumId(eumSignedInfo.getEumId());
    	euiccCard.setSmsrId(parameters.getEis().getSmsrId());
    	ecasdId = new String(UUID.randomUUID().toString().replace("-", ""));
    	euiccCard.setEcasdId(ecasdId);
    	signatureId = new String(UUID.randomUUID().toString().replace("-", ""));
    	euiccCard.setSignatureId(signatureId);
    	euiccCard.setProductionDate(eumSignedInfo.getProductionDate().toGregorianCalendar().getTime());
    	euiccCard.setPlatformType(eumSignedInfo.getPlatformType());
    	euiccCard.setPlatformVersion(eumSignedInfo.getPlatformVersion());
    	if (parameters.getEis().getRemainingMemory() != null) {
    		euiccCard.setRemainingMemory(parameters.getEis().getRemainingMemory().toString());
    	}
    	if (parameters.getEis().getAvailableMemoryForProfiles() != null) {
    		euiccCard.setAvailablememoryforprofiles(parameters.getEis().getAvailableMemoryForProfiles().toString());
    	}
    	if (parameters.getEis().getLastAuditDate() != null) {
    		euiccCard.setLastAuditDate(parameters.getEis().getLastAuditDate().toGregorianCalendar().getTime());
    	}
    	return euiccCard;
    }
    
    /**
     * 卡能力信息
     * @param parameters
     * @return
     */
    private EuiccCapabilities getEuiccCapabilities(ES1RegisterEISRequest parameters) {
    	EuiccCapabilities euiccCapabilities = new EuiccCapabilities();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignedInfo() == null 
    			|| parameters.getEis().getEumSignedInfo().getEuiccCapabilities() == null)
    		return null;
    	
    	EISType.EumSignedInfo.EuiccCapabilities info = parameters.getEis().getEumSignedInfo().getEuiccCapabilities();
		euiccCapabilities.setCapabilitieId(new String(UUID.randomUUID().toString().replace("-", "")));
    	euiccCapabilities.setEid(getEid(parameters));
    	euiccCapabilities.setCatTpSupport(info.isCattpSupport() ? "1" : "0");
    	euiccCapabilities.setCatTpVersion(info.getCattpVersion());
    	euiccCapabilities.setHttpSupport(info.isHttpSupport() ? "1" : "0");
    	euiccCapabilities.setHttpVersion(info.getHttpVersion());
    	euiccCapabilities.setSecurePacketVersion(info.getSecurePacketVersion());
    	euiccCapabilities.setRemoteProvisioningVersion(info.getRemoteProvisioningVersion());
    	return euiccCapabilities;
    }

    /**
     * ISDR安全域信息
     * @param parameters
     * @return
     */
    private EuiccIsdR getEuiccIsdR(ES1RegisterEISRequest parameters) {
    	EuiccIsdR euiccIsdR = new EuiccIsdR();
    	if (parameters.getEis() == null || parameters.getEis().getIsdR() == null) return null;
    	
    	SecurityDomainType isdR = parameters.getEis().getIsdR();
    	rId = new String(UUID.randomUUID().toString().replace("-", ""));
		euiccIsdR.setrId(rId);
		euiccIsdR.setEid(getEid(parameters));
		euiccIsdR.setIsdRAid(rId);
    	euiccIsdR.setAid(new String(isdR.getAid()));
    	euiccIsdR.setSin(new String(isdR.getSin()));
    	euiccIsdR.setSdin(new String(isdR.getSdin()));
    	if (isdR.getRole() != null) {
    		euiccIsdR.setRole(isdR.getRole().value());
    	}
    	return euiccIsdR;
    }
    
    /**
     * ECASD安全域信息
     * @param parameters
     * @return
     */
    private EuiccEcasd getEuiccEcasd(ES1RegisterEISRequest parameters) {
    	EuiccEcasd euiccEcasd = new EuiccEcasd();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignedInfo() == null 
    			|| parameters.getEis().getEumSignedInfo().getEcasd() == null) return null;
    	
    	SecurityDomainType ecasd = parameters.getEis().getEumSignedInfo().getEcasd();
    	euiccEcasd.setEcasdId(ecasdId);
    	euiccEcasd.setAid(new String(ecasd.getAid()));
    	euiccEcasd.setSin(new String(ecasd.getSin()));
    	euiccEcasd.setSdin(new String(ecasd.getSdin()));
    	if (ecasd.getRole() != null) {
    		euiccEcasd.setRole(ecasd.getRole().value());
    	}
    	return euiccEcasd;
    }
    
    /**
     * profile信息
     * @param parameters
     * @return
     */
    private List<EuiccProfileWithBLOBs> getEuiccProfile(ES1RegisterEISRequest parameters) {
    	List<EuiccProfileWithBLOBs> euiccProfileList = new ArrayList<EuiccProfileWithBLOBs>();
    	if (parameters.getEis() == null || parameters.getEis().getProfileInfo() == null) return null;
    	
    	List<ProfileInfo> profileInfoList = parameters.getEis().getProfileInfo();
    	EuiccProfileWithBLOBs euiccProfile = null;
    	for (ProfileInfo profile : profileInfoList) {
    		euiccProfile = new EuiccProfileWithBLOBs();
    		euiccProfile.setIccid(StringUtils.isEmpty(profile.getIccid()) ? new String(UUID.randomUUID().toString().replace("-", "")) : profile.getIccid());
    		euiccProfile.setEid(getEid(parameters));
    		euiccProfile.setIsdPAid(new String(profile.getIsdPAid()));
    		euiccProfile.setMnoId(profile.getMnoId());
    		euiccProfile.setFallbackAttribute(profile.isFallbackAttribute() ? "1" : "0");
    		euiccProfile.setImsi(profile.getSubscriptionAddress().getImsi());
    		euiccProfile.setMsisdn(profile.getSubscriptionAddress().getMsisdn());
    		if (profile.getState() != null) {
    			euiccProfile.setState(profile.getState().value());
    		}
    		euiccProfile.setSmdpId(profile.getSmdpId());
    		euiccProfile.setProfileType(profile.getProfileType());
    		if (profile.getAllocatedMemory() != null) {
    			euiccProfile.setAllocatedMemory(profile.getAllocatedMemory().toString());
    		}
    		if (profile.getFreeMemory() != null) {
    			euiccProfile.setFreeMemory(profile.getFreeMemory().toString());
    		}
    		String pol2Id = new String(UUID.randomUUID().toString().replace("-", ""));
    		pol2IdList.add(pol2Id);
    		euiccProfile.setPol2Id(pol2Id);
    		euiccProfileList.add(euiccProfile);
    	}
    	return euiccProfileList;
    }
    
    /**
     * Pol2信息
     * @param parameters
     * @return
     */
    private List<EuiccPol2> getEuiccPol2(ES1RegisterEISRequest parameters) {
    	List<EuiccPol2> euiccPol2List = new ArrayList<EuiccPol2>();
    	if (pol2IdList == null || pol2IdList.size() == 0) return null;
    	
    	List<ProfileInfo> profileInfoList = parameters.getEis().getProfileInfo();
    	EuiccPol2 euiccPol2 = null;
    	for (int i = 0; i < pol2IdList.size(); i++) {
    		POL2Type pol2Type = profileInfoList.get(i).getPol2();
    		if (pol2Type != null) {
    			List<POL2RuleType> pol2RuleTypeList = pol2Type.getRule();
    			for (POL2RuleType pol2RuleType : pol2RuleTypeList) {
    				euiccPol2 = new EuiccPol2();
    	    		euiccPol2.setPol2Id(pol2IdList.get(i));
    	    		if (pol2RuleType.getSubject() != null) {
    	    			euiccPol2.setSubject(pol2RuleType.getSubject().name());
    	    		}
    	    		if (pol2RuleType.getAction() != null) {
    	    			euiccPol2.setAction(pol2RuleType.getAction().value());
    	    		}
    	    		if (pol2RuleType.getQualification() != null) {
    	    			euiccPol2.setQualification(pol2RuleType.getQualification().value());
    	    		}
    	    		euiccPol2List.add(euiccPol2);
    			}
    		}
    	}
    	return euiccPol2List;
    }
    
    /**
     * ECASD keyset信息
     * @param parameters
     * @return
     */
    private List<EuiccIsdrKeyset> getEuiccIsdrKeyset(ES1RegisterEISRequest parameters) {
    	List<EuiccIsdrKeyset> euiccIsdrKeyset = new ArrayList<EuiccIsdrKeyset>();
    	List<Keyset> isdRKeySetList = null;
    	if (parameters.getEis() != null && parameters.getEis().getIsdR() != null
    			&& parameters.getEis().getIsdR().getKeyset() != null) {
    		isdRKeySetList = parameters.getEis().getIsdR().getKeyset();
    	}
    	EuiccIsdrKeyset euiccKeyset = null;
    	if (isdRKeySetList != null && isdRKeySetList.size() > 0) {
			for (Keyset keyset : isdRKeySetList) {
				euiccKeyset = new EuiccIsdrKeyset();
				euiccKeyset.setKeysetId(new String(UUID.randomUUID().toString().replace("-", "")));
				euiccKeyset.setrId(rId);
				euiccKeyset.setVersion(String.valueOf(keyset.getVersion()));
				if (keyset.getType() != null) {
					euiccKeyset.setType(keyset.getType().toString());
				}
				if (keyset.getCntr() != null) {
					euiccKeyset.setCntr(keyset.getCntr().toString());
				}
				List<Object>  keyOrCertificateList = new ArrayList<Object>();
				keyOrCertificateList = keyset.getKeyOrCertificate();
				StringBuffer keyOrCertificate = new StringBuffer();
				for (Object obj : keyOrCertificateList) {
					keyOrCertificate.append(obj);
				}
				if (keyOrCertificate != null) {
					euiccKeyset.setKeyOrCertificate(keyOrCertificate.toString());
				}
    			euiccIsdrKeyset.add(euiccKeyset);
			}
    	}
    	return euiccIsdrKeyset;
    }
    
    /**
     * isdr tar 信息
     * @param parameters
     * @return
     */
    private List<EuiccIsdrTar> getEuiccIsdrTar(ES1RegisterEISRequest parameters) {
    	List<EuiccIsdrTar> euiccIsdrTarList = new ArrayList<EuiccIsdrTar>();
    	List<byte[]> tarList = null;
    	if (parameters.getEis() != null && parameters.getEis().getIsdR() != null
    			&& parameters.getEis().getIsdR().getTar() != null) {
    		tarList = parameters.getEis().getIsdR().getTar();
    	}
    	
    	EuiccIsdrTar euiccIsdrTar = null;
    	for (byte[] tar : tarList) {
    		euiccIsdrTar = new EuiccIsdrTar();
    		euiccIsdrTar.setTarId(new String(UUID.randomUUID().toString().replace("-", "")));
    		euiccIsdrTar.setrId(rId);
    		euiccIsdrTar.setTar(new String(tar));
    		euiccIsdrTarList.add(euiccIsdrTar);
    	}
    	return euiccIsdrTarList;
    }
    
    /**
     * ISDR keyset信息
     * @param parameters
     * @return
     */
    private List<EuiccEcasdKeyset> getEuiccEcasdKeyset(ES1RegisterEISRequest parameters) {
    	List<EuiccEcasdKeyset> euiccEcasdKeyset = new ArrayList<EuiccEcasdKeyset>();
    	List<Keyset> ecasdKeySetList = null;
    	if (parameters.getEis() != null && parameters.getEis().getEumSignedInfo() != null 
    			&& parameters.getEis().getEumSignedInfo().getEcasd() != null 
    			&& parameters.getEis().getEumSignedInfo().getEcasd().getKeyset() != null) {
    		ecasdKeySetList = parameters.getEis().getEumSignedInfo().getEcasd().getKeyset();
    	}
    	EuiccEcasdKeyset euiccKeyset = null;
    	if (ecasdKeySetList != null && ecasdKeySetList.size() > 0) {
			for (Keyset keyset : ecasdKeySetList) {
				euiccKeyset = new EuiccEcasdKeyset();
				euiccKeyset.setKeysetId(new String(UUID.randomUUID().toString().replace("-", "")));
				euiccKeyset.setEcasdId(ecasdId);
				euiccKeyset.setVersion(String.valueOf(keyset.getVersion()));
				if (keyset.getType() != null) {
					euiccKeyset.setType(keyset.getType().toString());
				}
				if (keyset.getCntr() != null) {
					euiccKeyset.setCntr(keyset.getCntr().toString());
				}
				List<Object>  keyOrCertificateList = new ArrayList<Object>();
				keyOrCertificateList = keyset.getKeyOrCertificate();
				StringBuffer keyOrCertificate = new StringBuffer();
				for (Object obj : keyOrCertificateList) {
					keyOrCertificate.append(obj);
				}
				if (keyOrCertificate != null) {
					euiccKeyset.setKeyOrCertificate(keyOrCertificate.toString());
				}
    			euiccEcasdKeyset.add(euiccKeyset);
			}
    	}
    	return euiccEcasdKeyset;
    }
    
    /**
     * ecasd tar 信息
     * @param parameters
     * @return
     */
    private List<EuiccEcasdTar> getEuiccEcasdTar(ES1RegisterEISRequest parameters) {
    	List<EuiccEcasdTar> euiccEcasdTarList = new ArrayList<EuiccEcasdTar>();
    	List<byte[]> tarList = null;
    	if (parameters.getEis() != null && parameters.getEis().getEumSignedInfo() != null 
    			&& parameters.getEis().getEumSignedInfo().getEcasd() != null 
    			&& parameters.getEis().getEumSignedInfo().getEcasd().getTar() != null) {
    		tarList = parameters.getEis().getEumSignedInfo().getEcasd().getTar();
    	}
    	
    	EuiccEcasdTar euiccEcasdTar = null;
    	for (byte[] tar : tarList) {
    		euiccEcasdTar = new EuiccEcasdTar();
    		euiccEcasdTar.setTarId(new String(UUID.randomUUID().toString().replace("-", "")));
    		euiccEcasdTar.setEcasdId(ecasdId);
    		euiccEcasdTar.setTar(new String(tar));
    		euiccEcasdTarList.add(euiccEcasdTar);
    	}
    	return euiccEcasdTarList;
    }
    
    /**
     * 审计追踪信息
     * @param parameters
     * @return
     */
    private List<EuiccAuditTrailRecord> getEuiccAuditTrailRecord(ES1RegisterEISRequest parameters) {
    	List<EuiccAuditTrailRecord> euiccAuditTrailRecordList = new ArrayList<EuiccAuditTrailRecord>();
    	if (parameters.getEis() == null || parameters.getEis().getAuditTrail() == null 
    			|| parameters.getEis().getAuditTrail().getRecord() == null) return null;
    	
    	List<AuditTrailRecordType> auditTrailList = parameters.getEis().getAuditTrail().getRecord();
    	EuiccAuditTrailRecord euiccAuditTrailRecord = null;
    	for(AuditTrailRecordType auditTrailRecordType : auditTrailList) {
    		euiccAuditTrailRecord = new EuiccAuditTrailRecord();
    		auditId = new String(UUID.randomUUID().toString().replace("-", ""));
    		euiccAuditTrailRecord.setAuditId(auditId);
    		euiccAuditTrailRecord.setEid(new String(auditTrailRecordType.getEid()));
    		euiccAuditTrailRecord.setIccid(auditTrailRecordType.getIccid());
    		euiccAuditTrailRecord.setIsdPAid(new String(auditTrailRecordType.getIsdPAid()));
    		euiccAuditTrailRecord.setOperationDate(auditTrailRecordType.getOperationDate().toGregorianCalendar().getTime());
    		euiccAuditTrailRecord.setOperationType(new String(auditTrailRecordType.getOperationType()));
    		euiccAuditTrailRecord.setRequesterId(auditTrailRecordType.getRequesterId());
    		euiccAuditTrailRecord.setImei(new String(auditTrailRecordType.getImei()));
    		euiccAuditTrailRecord.setMeid(new String(auditTrailRecordType.getMeid()));
    		euiccAuditTrailRecord.setSmsrId(auditTrailRecordType.getSmsrId());
    		euiccAuditTrailRecordList.add(euiccAuditTrailRecord);
    	}
    	return euiccAuditTrailRecordList;
    }
    
    /**
     * 审计追踪状态信息
     * @param parameters
     * @return
     */
    private List<EuiccExecutionStatusType> getEuiccExecutionStatusType(ES1RegisterEISRequest parameters) {
    	List<EuiccExecutionStatusType> euiccExecutionStatusTypeList = new ArrayList<EuiccExecutionStatusType>();
    	if (parameters.getEis() == null || parameters.getEis().getAuditTrail() == null 
    			|| parameters.getEis().getAuditTrail().getRecord() == null 
    			|| parameters.getEis().getAuditTrail().getRecord().size() == 0) return null;
    	
    	List<AuditTrailRecordType> auditTrailList = parameters.getEis().getAuditTrail().getRecord();
    	EuiccExecutionStatusType euiccExecutionStatusType = null;
    	for (int i = 0; i < auditTrailList.size(); i++) {
    		AuditTrailRecordType auditTrailRecordType = auditTrailList.get(i);
    		euiccExecutionStatusType = new EuiccExecutionStatusType();
    		euiccExecutionStatusType.setStatusId(new String(UUID.randomUUID().toString().replace("-", "")));
    		euiccExecutionStatusType.setAuditId(auditId);
    		ExecutionStatusType executionStatusType = auditTrailRecordType.getOperationExecutionStatus();
    		if (executionStatusType != null) {
    			if (executionStatusType.getStatus() != null) {
    				euiccExecutionStatusType.setStatusType(executionStatusType.getStatus().name());
    			}
    			if (executionStatusType.getStatusCodeData() != null) {
    				euiccExecutionStatusType.setSubject(executionStatusType.getStatusCodeData().getSubject());
        			euiccExecutionStatusType.setReason(executionStatusType.getStatusCodeData().getReason());
        			euiccExecutionStatusType.setSubjectIdentifier(executionStatusType.getStatusCodeData().getSubjectIdentifier());
        			euiccExecutionStatusType.setMessage(executionStatusType.getStatusCodeData().getMessage());
    			}
    		}
    		euiccExecutionStatusTypeList.add(euiccExecutionStatusType);
    	}
    	return euiccExecutionStatusTypeList;
    }
    
    /**
     * 附加属性信息
     * @param parameters
     * @return
     */
    private List<EuiccPropertyType> getEuiccPropertyType(ES1RegisterEISRequest parameters) {
    	List<EuiccPropertyType> euiccPropertyTypeList = new ArrayList<EuiccPropertyType>();
    	if (parameters.getEis() == null || parameters.getEis().getAdditionalProperties() == null
    			|| parameters.getEis().getAdditionalProperties().getProperty() == null)
    		return null;
    	
    	List<PropertyType> propertyList = parameters.getEis().getAdditionalProperties().getProperty();
    	EuiccPropertyType euiccPropertyType = null;
    	for (PropertyType propertyType : propertyList) {
    		euiccPropertyType = new EuiccPropertyType();
    		euiccPropertyType.setPropertyId(new String(UUID.randomUUID().toString().replace("-", "")));
    		euiccPropertyType.setEid(getEid(parameters));
    		euiccPropertyType.setPropertyKey(propertyType.getKey());
    		euiccPropertyType.setPropertyValue(propertyType.getValue());
    		euiccPropertyTypeList.add(euiccPropertyType);
    	}
    	return euiccPropertyTypeList;
    }
    
    /**
     * Eum签名信息
     * @param parameters
     * @return
     */
    private EuiccEumSignature getEuiccEumSignature(ES1RegisterEISRequest parameters) {
    	EuiccEumSignature euiccEumSignature = new EuiccEumSignature();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignature() == null)
    		return null;
    	
    	SignatureType signatureType = parameters.getEis().getEumSignature();
    	euiccEumSignature.setSignatureId(signatureId);
    	signedInfoId = new String(UUID.randomUUID().toString().replace("-", ""));
    	euiccEumSignature.setSingedInfoId(signedInfoId);
    	keyInfoId = new String(UUID.randomUUID().toString().replace("-", ""));
    	euiccEumSignature.setKeyInfoId(keyInfoId);
    	euiccEumSignature.setId(signatureType.getId());
    	
    	SignatureValueType signatureValueType = signatureType.getSignatureValue();
    	if (signatureValueType != null) {
    		euiccEumSignature.setValueTypeValue(new String(signatureValueType.getValue()));
    		euiccEumSignature.setValueTypeId(signatureValueType.getId());
    	}
    	return euiccEumSignature;
    }
    
    /**
     * EUM签名key信息
     * @param parameters
     * @return
     */
    private EuiccKeyInfoType getEuiccKeyInfoType(ES1RegisterEISRequest parameters) {
    	EuiccKeyInfoType euiccKeyInfoType = new EuiccKeyInfoType();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignature() == null
    			|| parameters.getEis().getEumSignature().getKeyInfo() == null)
    		return null;
    	
    	KeyInfoType keyInfoType = parameters.getEis().getEumSignature().getKeyInfo();
    	euiccKeyInfoType.setKeyInfoId(keyInfoId);
    	retrievalId = new String(UUID.randomUUID().toString().replace("-", ""));
    	euiccKeyInfoType.setRetrievalId(retrievalId);
    	euiccKeyInfoType.setKeyName(keyInfoType.getKeyName());
    	euiccKeyInfoType.setMgmtData(keyInfoType.getMgmtData());
    	euiccKeyInfoType.setId(keyInfoType.getId());
    	
    	KeyValueType keyValueType = keyInfoType.getKeyValue();
    	if (keyValueType != null) {
    		if (keyValueType.getdSAKeyValue() != null) {
    			DSAKeyValueType d = keyValueType.getdSAKeyValue();
    			euiccKeyInfoType.setP(new String(d.getP()));
        		euiccKeyInfoType.setQ(new String(d.getQ()));
        		euiccKeyInfoType.setG(new String(d.getG()));
        		euiccKeyInfoType.setY(new String(d.getY()));
        		euiccKeyInfoType.setJ(new String(d.getJ()));
        		euiccKeyInfoType.setSeed(new String(d.getSeed()));
        		euiccKeyInfoType.setPgenCounter(new String(d.getPgenCounter()));
    		}
    		
    		if (keyValueType.getrSAKeyValue() != null) {
    			RSAKeyValueType r = keyValueType.getrSAKeyValue();
        		euiccKeyInfoType.setModulus(new String(r.getModulus()));
        		euiccKeyInfoType.setExponent(new String(r.getExponent()));
    		}
    	}
    	
    	X509DataType x509DataType = keyInfoType.getX509DataType();
    	if (x509DataType != null) {
    		euiccKeyInfoType.setX509SubjectName(x509DataType.getX509SubjectName());
    		euiccKeyInfoType.setX509Certificate(x509DataType.getX509Certificate());
    		euiccKeyInfoType.setX509Ski(x509DataType.getX509SKI());
    		euiccKeyInfoType.setX509Crl(x509DataType.getX509CRL());
    		if (x509DataType.getX509IssuerSerial() != null) {
    			X509IssuerSerialType x509IssuerSerialType = x509DataType.getX509IssuerSerial();
    			euiccKeyInfoType.setX509IssuerName(x509IssuerSerialType.getX509IssuerName());
    			if (x509IssuerSerialType.getX509SerialNumber() != null) {
    				euiccKeyInfoType.setX509SerialNumber(x509IssuerSerialType.getX509SerialNumber().toString());
    			}
    		}
    	}
    	
    	PGPDataType p = keyInfoType.getpGPData();
    	if (p != null) {
    		euiccKeyInfoType.setpGpKeyPacket(p.getpGPKeyPacket());
    		euiccKeyInfoType.setpGpKeyId(p.getpGPKeyID());
    	}
    	
    	SPKIDataType s = keyInfoType.getsPKIData();
    	if (s != null) {
    		euiccKeyInfoType.setsPkiSexp(s.getsPKISexp());
    	}
    	
    	return euiccKeyInfoType;
    }
    
    /**
     * RetrievalMethod信息
     * @param parameters
     * @return
     */
    private EuiccRetrievalMethodType getEuiccRetrievalMethodType(ES1RegisterEISRequest parameters) {
    	EuiccRetrievalMethodType euiccRetrievalMethodType = new EuiccRetrievalMethodType();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignature() == null
    			|| parameters.getEis().getEumSignature().getKeyInfo() == null
    			|| parameters.getEis().getEumSignature().getKeyInfo().getRetrevalMethod() == null)
    		return null;
    	
    	RetrievalMethodType retrievalMethodType = parameters.getEis().getEumSignature().getKeyInfo().getRetrevalMethod();
    	euiccRetrievalMethodType.setRetrievalId(retrievalId);
    	euiccRetrievalMethodType.setUri(retrievalMethodType.getURI());
    	euiccRetrievalMethodType.setType(retrievalMethodType.getType());
    	return euiccRetrievalMethodType;
    }
    
    /**
     * RetrievalTransform信息
     * @param parameters
     * @return
     */
    private List<EuiccRetrievalTransformType> getEuiccRetrievalTransformType(ES1RegisterEISRequest parameters) {
    	List<EuiccRetrievalTransformType> euiccRetrievalTransformTypeList = new ArrayList<EuiccRetrievalTransformType>();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignature() == null
    			|| parameters.getEis().getEumSignature().getKeyInfo() == null
    			|| parameters.getEis().getEumSignature().getKeyInfo().getRetrevalMethod() == null
    			|| parameters.getEis().getEumSignature().getKeyInfo().getRetrevalMethod().getTransforms() == null)
    		return null;
    	
    	List<TransformType> transformTypeList = parameters.getEis().getEumSignature().getKeyInfo().getRetrevalMethod().getTransforms().getTransform();
    	EuiccRetrievalTransformType euiccRetrievalTransformType = null;
    	for (TransformType transformType : transformTypeList) {
    		euiccRetrievalTransformType = new EuiccRetrievalTransformType();
    		euiccRetrievalTransformType.setTransformId(new String(UUID.randomUUID().toString().replace("-", "")));
    		euiccRetrievalTransformType.setRetrievalId(retrievalId);
    		euiccRetrievalTransformType.setXpath(transformType.getxPath());
    		euiccRetrievalTransformType.setAlgorithm(transformType.getAlgorithm());
    		euiccRetrievalTransformTypeList.add(euiccRetrievalTransformType);
    	}
    	return euiccRetrievalTransformTypeList;
    }
    
    /**
     * Signed信息
     * @param parameters
     * @return
     */
    private EuiccSignedInfoType getEuiccSignedInfoType(ES1RegisterEISRequest parameters) {
    	EuiccSignedInfoType euiccSignedInfoType = new EuiccSignedInfoType();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignature() == null
    			|| parameters.getEis().getEumSignature().getSignedInfo() == null)
    		return null;
    	
    	SignedInfoType signedInfoType = parameters.getEis().getEumSignature().getSignedInfo();
    	euiccSignedInfoType.setSignedInfoId(signedInfoId);
    	euiccSignedInfoType.setId(signedInfoType.getId());
    	SignatureMethodType signatureMethodType = signedInfoType.getSignatureMethod();
    	if (signatureMethodType != null) {
    		euiccSignedInfoType.setSignatureHMacOutputLength(signatureMethodType.gethMACOutputLength());
    		euiccSignedInfoType.setSignatureAlgorithm(signatureMethodType.getAlgorithm());
    	}
    	return euiccSignedInfoType;
    }
    
    /**
     * CanonicalizationMethod信息
     * @param parameters
     * @return
     */
    private List<EuiccCanonicalizationMethodType> getEuiccCanonicalizationMethodType(ES1RegisterEISRequest parameters) {
    	List<EuiccCanonicalizationMethodType> euiccCanonicalizationMethodTypeList = new ArrayList<EuiccCanonicalizationMethodType>();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignature() == null
    			|| parameters.getEis().getEumSignature().getSignedInfo() == null
    			|| parameters.getEis().getEumSignature().getSignedInfo().getCanonicalizationMethod() == null)
    		return null;
    	
    	CanonicalizationMethodType canonicalizationMethodType = parameters.getEis().getEumSignature().getSignedInfo().getCanonicalizationMethod();
    	List<Object> objList = canonicalizationMethodType.getContent();
    	EuiccCanonicalizationMethodType euiccCanonicalizationMethodType = null;
    	for (Object obj : objList) {
    		euiccCanonicalizationMethodType = new EuiccCanonicalizationMethodType();
    		euiccCanonicalizationMethodType.setTypeId(new String(UUID.randomUUID().toString().replace("-", "")));
    		euiccCanonicalizationMethodType.setSignedInfoId(signedInfoId);
    		euiccCanonicalizationMethodType.setAlgorithm(canonicalizationMethodType.getAlgorithm());
    		if (obj != null) {
    			euiccCanonicalizationMethodType.setContent(obj.toString());
    		}
    		euiccCanonicalizationMethodTypeList.add(euiccCanonicalizationMethodType);
    	}
    	return euiccCanonicalizationMethodTypeList;
    }
    
    /**
     * Reference信息
     * @param parameters
     * @return
     */
    private List<EuiccReferenceType> getEuiccReferenceType(ES1RegisterEISRequest parameters) {
    	List<EuiccReferenceType> euiccReferenceTypeList = new ArrayList<EuiccReferenceType>();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignature() == null
    			|| parameters.getEis().getEumSignature().getSignedInfo() == null
    			|| parameters.getEis().getEumSignature().getSignedInfo().getReference() == null)
    		return null;
    	
    	List<ReferenceType> referenceTypeList = parameters.getEis().getEumSignature().getSignedInfo().getReference();
    	EuiccReferenceType euiccReferenceType = null;
    	for (ReferenceType r : referenceTypeList) {
    		euiccReferenceType = new EuiccReferenceType();
    		String referenceId = new String(UUID.randomUUID().toString().replace("-", ""));
    		referenceIdList.add(referenceId);
    		euiccReferenceType.setReferenceId(referenceId);
    		euiccReferenceType.setSignedInfoId(signedInfoId);
    		euiccReferenceType.setDigestValue(new String(r.getDigestValue()));
    		euiccReferenceType.setId(r.getId());
    		euiccReferenceType.setUri(r.getURI());
    		euiccReferenceType.setType(r.getType());
    		euiccReferenceTypeList.add(euiccReferenceType);
    	}
    	return euiccReferenceTypeList;
    }
    
    /**
     * ReferenceTransform信息
     * @param parameters
     * @return
     */
    private List<EuiccReferenceTransformType> getEuiccReferenceTransformType(ES1RegisterEISRequest parameters) {
    	List<EuiccReferenceTransformType> euiccReferenceTransformTypeList = new ArrayList<EuiccReferenceTransformType>();
    	if (referenceIdList == null || referenceIdList.size() == 0) return null;
    	
    	List<ReferenceType> referenceTypeList = parameters.getEis().getEumSignature().getSignedInfo().getReference();
    	EuiccReferenceTransformType euiccReferenceTransformType = null;
    	ReferenceType referenceType = null;
    	TransformsType transformsType = null;
    	for (int i = 0; i < referenceIdList.size(); i++) {
    		referenceType = referenceTypeList.get(i);
    		transformsType = referenceType.getTransforms();
    		if (transformsType != null) {
    			List<TransformType> transformTypeList = transformsType.getTransform();
    			for (TransformType t : transformTypeList) {
    				euiccReferenceTransformType = new EuiccReferenceTransformType();
    				euiccReferenceTransformType.setTransformId(new String(UUID.randomUUID().toString().replace("-", "")));
    				euiccReferenceTransformType.setReferenceId(referenceIdList.get(i));
    				euiccReferenceTransformType.setXpath(t.getxPath());
    				euiccReferenceTransformType.setAlgorithm(t.getAlgorithm());
    				euiccReferenceTransformTypeList.add(euiccReferenceTransformType);
    			}
    		}
    	}
    	return euiccReferenceTransformTypeList;
    }
    
    /**
     * DigestMethod信息
     * @param parameters
     * @return
     */
    private List<EuiccDigestMethodType> getEuiccDigestMethodType(ES1RegisterEISRequest parameters) {
    	List<EuiccDigestMethodType> euiccDigestMethodTypeList = new ArrayList<EuiccDigestMethodType>();
    	if (referenceIdList == null || referenceIdList.size() == 0) return null;
    	
    	List<ReferenceType> referenceTypeList = parameters.getEis().getEumSignature().getSignedInfo().getReference();
    	EuiccDigestMethodType euiccDigestMethodType = null;
    	ReferenceType r = null;
    	DigestMethodType digestMethodType = null;
    	for (int i = 0; i < referenceIdList.size(); i++) {
    		r = referenceTypeList.get(i);
    		digestMethodType = r.getDigestMethod();
    		if (digestMethodType != null) {
    			List<Object> objList = digestMethodType.getContent();
    			if (objList != null && objList.size() > 0) {
    				for (Object obj : objList) {
        				euiccDigestMethodType = new EuiccDigestMethodType();
        				euiccDigestMethodType.setTypeId(new String(UUID.randomUUID().toString().replace("-", "")));
        				euiccDigestMethodType.setReferenceId(referenceIdList.get(i));
        				if (obj != null) {
        					euiccDigestMethodType.setContent(obj.toString());
        				}
        				euiccDigestMethodType.setAlgorithm(digestMethodType.getAlgorithm());
        				euiccDigestMethodTypeList.add(euiccDigestMethodType);
        			}
    			} else {
    				euiccDigestMethodType = new EuiccDigestMethodType();
    				euiccDigestMethodType.setTypeId(new String(UUID.randomUUID().toString().replace("-", "")));
    				euiccDigestMethodType.setReferenceId(referenceIdList.get(i));
    				euiccDigestMethodType.setAlgorithm(digestMethodType.getAlgorithm());
    				euiccDigestMethodTypeList.add(euiccDigestMethodType);
    			}
    			
    		}
    	}
    	return euiccDigestMethodTypeList;
    }
    
    /**
     * Object信息
     * @param parameters
     * @return
     */
    private List<EuiccObjectType> getEuiccObjectType(ES1RegisterEISRequest parameters) {
    	List<EuiccObjectType> euiccObjectTypeList = new ArrayList<EuiccObjectType>();
    	if (parameters.getEis() == null || parameters.getEis().getEumSignature() == null
    			|| parameters.getEis().getEumSignature().getObject() == null)
    		return null;
    	
    	List<ObjectType> objectTypeList = parameters.getEis().getEumSignature().getObject();
    	EuiccObjectType euiccObjectType = null;
    	for (ObjectType objectType : objectTypeList) {
    		List<Object> objList = objectType.getContent();
    		if (objList != null && objList.size() > 0) {
    			for (Object obj : objList) {
        			euiccObjectType = new EuiccObjectType();
        			euiccObjectType.setTypeId(new String(UUID.randomUUID().toString().replace("-", "")));
        			euiccObjectType.setSignatureId(signatureId);
        			if (obj != null) {
        				euiccObjectType.setContent(obj.toString());
        			}
        			euiccObjectType.setId(objectType.getId());
        			euiccObjectType.setMimeType(objectType.getMimeType());
        			euiccObjectType.setEncoding(objectType.getEncoding());
        			euiccObjectTypeList.add(euiccObjectType);
        		}
    		} else {
    			euiccObjectType = new EuiccObjectType();
    			euiccObjectType.setTypeId(new String(UUID.randomUUID().toString().replace("-", "")));
    			euiccObjectType.setSignatureId(signatureId);
    			euiccObjectType.setId(objectType.getId());
    			euiccObjectType.setMimeType(objectType.getMimeType());
    			euiccObjectType.setEncoding(objectType.getEncoding());
    			euiccObjectTypeList.add(euiccObjectType);
    		}
    		
    	}
    	return euiccObjectTypeList;
    }
    
    /**
     * 获取eid
     * @param parameters
     * @return
     */
    private String getEid(ES1RegisterEISRequest parameters) {
    	String eid = null;
    	if (parameters.getEis().getEumSignedInfo() != null) {
			eid = new String(parameters.getEis().getEumSignedInfo().getEid());
    	}
    	return eid;
    }
}

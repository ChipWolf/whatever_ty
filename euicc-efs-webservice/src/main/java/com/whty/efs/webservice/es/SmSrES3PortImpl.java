/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.whty.efs.webservice.es;

import java.math.BigInteger;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;

import javax.jws.HandlerChain;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.commons.lang.StringUtils;
import org.apache.cxf.interceptor.InInterceptors;
import org.apache.cxf.interceptor.OutInterceptors;
import org.apache.xml.resolver.apps.resolver;

import com.ctc.wstx.util.StringUtil;
import com.google.gson.Gson;
import com.whty.efs.common.bean.RespMessage;
import com.whty.efs.common.exception.ErrorCode;
import com.whty.efs.common.exception.EuiccBusiException;
import com.whty.efs.common.https.BaseHttp;
import com.whty.efs.common.util.SecurityUtil;
import com.whty.efs.packets.message.EuiccMsg;
import com.whty.efs.packets.message.MsgHeader;
import com.whty.efs.packets.message.request.ES3ConnectParaUpdateByHttpsReqBody;
import com.whty.efs.packets.message.request.ES3CreateISDPReqBody;
import com.whty.efs.packets.message.request.ES3DeleteProfileReqBody;
import com.whty.efs.packets.message.request.ES3DisableProfileReqBody;
import com.whty.efs.packets.message.request.ES3EnableProfileReqBody;
import com.whty.efs.packets.message.request.ES3GetEISReqBody;
import com.whty.efs.packets.message.request.ES3GetScp03CounterReqBody;
import com.whty.efs.packets.message.request.ES3GetStatusReqBody;
import com.whty.efs.packets.message.request.ES3InstallProfileReqBody;
import com.whty.efs.packets.message.request.ES3PersonalISDPReqBody;
import com.whty.efs.packets.message.request.ES3ProfileDownloadCompletedReqBody;
import com.whty.efs.packets.message.request.ES3UpdatePolilcyRulesReqBody;
import com.whty.efs.packets.message.request.ES3UpdateSubscriAddrReqBody;
import com.whty.efs.webservice.es.message.EISType;
import com.whty.efs.webservice.es.message.ES3AuditEISRequest;
import com.whty.efs.webservice.es.message.ES3AuditEISResponse;
import com.whty.efs.webservice.es.message.ES3CreateISDPRequest;
import com.whty.efs.webservice.es.message.ES3CreateISDPResponse;
import com.whty.efs.webservice.es.message.ES3DeleteISDPRequest;
import com.whty.efs.webservice.es.message.ES3DeleteISDPResponse;
import com.whty.efs.webservice.es.message.ES3DisableProfileRequest;
import com.whty.efs.webservice.es.message.ES3DisableProfileResponse;
import com.whty.efs.webservice.es.message.ES3EnableProfileRequest;
import com.whty.efs.webservice.es.message.ES3EnableProfileResponse;
import com.whty.efs.webservice.es.message.ES3GetEISRequest;
import com.whty.efs.webservice.es.message.ES3GetEISResponse;
import com.whty.efs.webservice.es.message.ES3ProfileDownloadCompletedRequest;
import com.whty.efs.webservice.es.message.ES3ProfileDownloadCompletedResponse;
import com.whty.efs.webservice.es.message.ES3SendDataRequest;
import com.whty.efs.webservice.es.message.ES3SendDataResponse;
import com.whty.efs.webservice.es.message.ES3SmSr;
import com.whty.efs.webservice.es.message.ES3UpdateConnectivityParametersRequest;
import com.whty.efs.webservice.es.message.ES3UpdateConnectivityParametersResponse;
import com.whty.efs.webservice.es.message.ES3UpdatePolicyRulesRequest;
import com.whty.efs.webservice.es.message.ES3UpdatePolicyRulesResponse;
import com.whty.efs.webservice.es.message.ES3UpdateSubscriptionAddressRequest;
import com.whty.efs.webservice.es.message.ES3UpdateSubscriptionAddressResponse;
import com.whty.efs.webservice.es.message.ExecutionStatusType;
import com.whty.efs.webservice.es.message.POL2RuleType;
import com.whty.efs.webservice.es.message.StatusCodeDataType;
import com.whty.efs.webservice.es.message.StatusType;

/**
 * This class was generated by Apache CXF 3.1.9 2017-01-06T15:06:23.814+08:00
 * Generated source version: 3.1.9
 * 
 */

@javax.jws.WebService(serviceName = "ES3SmSrService", portName = "SmSrES3Port", targetNamespace = "http://namespaces.gsma.org/esim-messaging/3", wsdlLocation = "WebServicesAPI/ES3_SMSR.wsdl", endpointInterface = "com.whty.efs.webservice.es.message.ES3SmSr")
@HandlerChain(file = "/ws/chain/es-handler-chain.xml")
@InInterceptors(interceptors = "org.apache.cxf.interceptor.LoggingInInterceptor")
@OutInterceptors(interceptors = "com.whty.efs.webservice.interceptor.ESOutInterceptor")
public class SmSrES3PortImpl implements ES3SmSr {

	private static final Logger LOG = Logger.getLogger(SmSrES3PortImpl.class
			.getName());

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3GetEIS(com.whty.efs.webservice
	 * .es.message.ES3GetEISRequest2 parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3GetEISResponse es3GetEIS(
			ES3GetEISRequest parameters) {
		LOG.info("Executing operation es3GetEIS");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3GetEISResponse _return = new ES3GetEISResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
			byte[] resultEis = getEIS(parameters);
//            RespMessage respMessage = new Gson().fromJson(new String(resultEis), RespMessage.class);
            XMLGregorianCalendar processEnd = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
			dataType.setSubject("01");
			dataType.setSubjectIdentifier("02");
			dataType.setReason("03");
			dataType.setMessage("04");
			statusType.setStatusCodeData(dataType);
			_return.setProcessingStart(processStart);
            _return.setProcessingEnd(processEnd);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			_return.setEis(new Gson().fromJson(new String(resultEis), EISType.class));// eis
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * 调用SR获得EIS
	 * 
	 * @param parameters
	 * @return
	 * @throws Exception
	 */
	private byte[] getEIS(ES3GetEISRequest parameters) throws Exception {
		MsgHeader header = new MsgHeader("retrieveEISBySr");
		ES3GetEISReqBody requestBody = new ES3GetEISReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		EuiccMsg<ES3GetEISReqBody> euiccMsg = new EuiccMsg<ES3GetEISReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		System.out.println(new String(msgBype));
		return msgBype;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3DeleteISDP(com.whty.efs
	 * .webservice.es.message.ES3DeleteISDPRequest parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3DeleteISDPResponse es3DeleteISDP(
			ES3DeleteISDPRequest parameters) {
		LOG.info("Executing operation es3DeleteISDP");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3DeleteISDPResponse _return = new ES3DeleteISDPResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
        statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			byte[] deleteRes = deleteISDP(parameters);
            RespMessage respMessage = new Gson().fromJson(new String(deleteRes), RespMessage.class);
            XMLGregorianCalendar processEnd = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
        	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
        		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
        	}
			statusType.setStatusCodeData(dataType);
			dataType.setMessage(respMessage.getMessage());
			_return.setProcessingStart(processStart);
            _return.setProcessingEnd(processEnd);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			_return.setEuiccResponseData(deleteRes);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException ) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "8.2.1")){
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "8010")) {
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Not Allowed (Authorisation)");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Invalid")) {
					dataType.setSubjectIdentifier("8.2.2");
	    			dataType.setSubject("POL1");
	    			dataType.setReason("Refuesed");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Refuesed")) {
					dataType.setSubjectIdentifier("8.2.3");
	    			dataType.setSubject("POL2");
	    			dataType.setReason("Refuesed");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Execution error")) {
					dataType.setSubjectIdentifier("8.4");
	    			dataType.setSubject("ISD-R");
	    			dataType.setReason("Execution error");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * 删除ISDP
	 * 
	 * @param parameters
	 * @return 
	 * @throws Exception
	 */
	private byte[] deleteISDP(ES3DeleteISDPRequest parameters) throws Exception {
		MsgHeader header = new MsgHeader("deleteProfileByHttps");
		ES3DeleteProfileReqBody requestBody = new ES3DeleteProfileReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(parameters.getIccid());
		EuiccMsg<ES3DeleteProfileReqBody> euiccMsg = new EuiccMsg<ES3DeleteProfileReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		System.out.println("DeleteISDP >>> " + new String(msgBype));
		return msgBype;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3UpdateSubscriptionAddress
	 * (com.whty.efs.webservice.es.message.ES3UpdateSubscriptionAddressRequest
	 * parameters)*
	 */
	public ES3UpdateSubscriptionAddressResponse es3UpdateSubscriptionAddress(
			ES3UpdateSubscriptionAddressRequest parameters) {
		LOG.info("Executing operation es3UpdateSubscriptionAddress");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3UpdateSubscriptionAddressResponse _return = new ES3UpdateSubscriptionAddressResponse();
        ExecutionStatusType statusType = new ExecutionStatusType();
        StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            byte[] updateRes = updateSubscriptionAddress(parameters);
            RespMessage respMessage = new Gson().fromJson(new String(updateRes), RespMessage.class);
            XMLGregorianCalendar processEnd = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
			statusType.setStatusCodeData(dataType);
			dataType.setMessage(respMessage.getMessage());
			_return.setProcessingStart(processStart);
            _return.setProcessingEnd(processEnd);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "8.2.1")){
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "8010")) {
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Not Allowed (Authorisation)");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Invalid")) {
					dataType.setSubjectIdentifier("8.2.2");
	    			dataType.setSubject("POL1");
	    			dataType.setReason("Refuesed");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Refuesed")) {
					dataType.setSubjectIdentifier("8.2.3");
	    			dataType.setSubject("POL2");
	    			dataType.setReason("Refuesed");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Execution error")) {
					dataType.setSubjectIdentifier("8.4");
	    			dataType.setSubject("ISD-R");
	    			dataType.setReason("Execution error");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * update subscription address
	 * 
	 * @param parameters
	 * @return 
	 * @throws Exception
	 */
	private byte[] updateSubscriptionAddress(
			ES3UpdateSubscriptionAddressRequest parameters) throws Exception {
    	MsgHeader header = new MsgHeader("updateSubscriAddrBySr");
    	ES3UpdateSubscriAddrReqBody requestBody = new ES3UpdateSubscriAddrReqBody();
    	requestBody.setEid(new String(parameters.getEid()));
    	requestBody.setIccid(parameters.getIccid());
    	requestBody.setImsi(parameters.getNewSubscriptionAddress().getImsi());
    	requestBody.setMsisdn(parameters.getNewSubscriptionAddress().getMsisdn());
    	EuiccMsg<ES3UpdateSubscriAddrReqBody> euiccMsg = new EuiccMsg<ES3UpdateSubscriAddrReqBody>(header,requestBody);
    	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
    	byte[] msgBype = BaseHttp.doPostBySr(json);
    	RespMessage respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
    	return msgBype;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3CreateISDP(com.whty.efs
	 * .webservice.es.message.ES3CreateISDPRequest parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3CreateISDPResponse es3CreateISDP(
			ES3CreateISDPRequest parameters) {
		LOG.info("Executing operation es3CreateISDP");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3CreateISDPResponse _return = new ES3CreateISDPResponse();
		ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			byte[] msg = createISDP(parameters);
			System.out.println("es3CreateISDP >>> " + new String(msg));
    		RespMessage respMessage = new Gson().fromJson(new String(msg), RespMessage.class);
        	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
        		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
        	}
			XMLGregorianCalendar processEnd = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			
			statusType.setStatusCodeData(dataType);
			dataType.setMessage(respMessage.getMessage());
			_return.setProcessingStart(processStart);
            _return.setProcessingEnd(processEnd);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			_return.setEuiccResponseData(msg);
			if (respMessage.getData() != null) {
				_return.setIsdPAid(respMessage.getData().getBytes());
			}
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0821")){
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Already in use");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Execution error")) {
					dataType.setSubjectIdentifier("8.4");
	    			dataType.setSubject("ISD-R");
	    			dataType.setReason("Execution error");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Insufficient memory")) {
					dataType.setSubjectIdentifier("8.1");
	    			dataType.setSubject("EUICC");
	    			dataType.setReason("Insufficient memory");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * 
	 * @param parameters
	 * @return
	 * @throws Exception
	 */
	private byte[] createISDP(ES3CreateISDPRequest parameters) throws Exception {
		MsgHeader header = new MsgHeader("createISDP");
		ES3CreateISDPReqBody requestBody = new ES3CreateISDPReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(parameters.getIccid());

		requestBody.setMnoId(parameters.getMnoId());
		requestBody.setRequiredMemory(parameters.getRequiredMemory());

		EuiccMsg<ES3CreateISDPReqBody> euiccMsg = new EuiccMsg<ES3CreateISDPReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		return msgBype;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3UpdatePolicyRules(com.whty
	 * .efs.webservice.es.message.ES3UpdatePolicyRulesRequest parameters)*
	 */
	public ES3UpdatePolicyRulesResponse es3UpdatePolicyRules(ES3UpdatePolicyRulesRequest parameters) {
		LOG.info("Executing operation es3UpdatePolicyRules");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3UpdatePolicyRulesResponse _return = new ES3UpdatePolicyRulesResponse();
		ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            byte[] msg = updatePolicyRules(parameters);
    		System.out.println("UpdatePolicyRules >>> " + new String(msg));
    		RespMessage respMessage = new Gson().fromJson(new String(msg), RespMessage.class);
        	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
        		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
        	}
            XMLGregorianCalendar processEnd = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
			dataType.setSubject("01");
			dataType.setSubjectIdentifier("02");
			dataType.setReason(respMessage.getCode());
			dataType.setMessage(respMessage.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setProcessingStart(processStart);
            _return.setProcessingEnd(processEnd);
            _return.setAcceptableValidityPeriod(new BigInteger("2"));
            _return.setFunctionExecutionStatus(statusType);
            return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0821")){
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Already in use");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Execution error")) {
					dataType.setSubjectIdentifier("8.4");
	    			dataType.setSubject("ISD-R");
	    			dataType.setReason("Execution error");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Insufficient memory")) {
					dataType.setSubjectIdentifier("8.1");
	    			dataType.setSubject("EUICC");
	    			dataType.setReason("Insufficient memory");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * 更新策略规则
	 * 
	 * @param parameters
	 * @throws Exception
	 */
	private byte[] updatePolicyRules(ES3UpdatePolicyRulesRequest parameters)
			throws Exception {
		MsgHeader header = new MsgHeader("updatePolicyRules");
		String smSrId = "1";
		String pol2Id = parsePOL2(parameters);// O
		if (StringUtils.isBlank(pol2Id)) throw new EuiccBusiException("pol2 error", "no such pol2 rules defined please check");
		ES3UpdatePolilcyRulesReqBody requestBody = new ES3UpdatePolilcyRulesReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(parameters.getIccid());
		requestBody.setSmSrId(smSrId);
		requestBody.setPol2Id(pol2Id);
		EuiccMsg<ES3UpdatePolilcyRulesReqBody> euiccMsg = new EuiccMsg<ES3UpdatePolilcyRulesReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		return msgBype;
	}

	/**
     * 处理pol2
     * @param parameters
     * @return
     */
    private String parsePOL2(ES3UpdatePolicyRulesRequest parameters) {
    	String pol2Id = null;
    	List<POL2RuleType> rules = parameters.getPol2().getRule();
    	for (POL2RuleType pol2RuleType : rules) {
    		String subject = pol2RuleType.getSubject().name();
    		String action = pol2RuleType.getAction().name();
    		String qualification = pol2RuleType.getQualification().name();
    		if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DISABLE")
    				&& StringUtils.equals(qualification, "NOT_ALLOWED")) {
				pol2Id = "01";
			}else if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DELETE")
    				&& StringUtils.equals(qualification, "NOT_ALLOWED")) {
				pol2Id = "02";
				
			}else if (StringUtils.equals(subject, "PROFILE") && StringUtils.equals(action, "DISABLE")
    				&& StringUtils.equals(qualification, "AUTO_DELETE")) {
				pol2Id = "03";
			}
    	}
		return pol2Id;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3ProfileDownloadCompleted
	 * (com.whty.efs.webservice.es.message.ES3ProfileDownloadCompletedRequest
	 * parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3ProfileDownloadCompletedResponse es3ProfileDownloadCompleted(
			ES3ProfileDownloadCompletedRequest parameters) {
		LOG.info("Executing operation es3ProfileDownloadCompleted");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3ProfileDownloadCompletedResponse _return = new ES3ProfileDownloadCompletedResponse();
		ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			byte[] completeRes = profileDownloadCompleted(parameters);
			System.out.println("profileDownloadCompleted >>> "
					+ new String(completeRes));
			RespMessage respMessage = new Gson().fromJson(new String(completeRes), RespMessage.class);
	    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
	    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
	    	}
			XMLGregorianCalendar processEnd = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			
			statusType.setStatusCodeData(dataType);
			dataType.setMessage(respMessage.getMessage());
			_return.setProcessingStart(processStart);
            _return.setProcessingEnd(processEnd);
			dataType.setMessage(respMessage.getMessage());
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Uknown")){
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0831")) {
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Invalid destination");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Invalid")) {
					dataType.setSubjectIdentifier("8.2.3");
	    			dataType.setSubject("POL2");
	    			dataType.setReason("Invalid");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * Profile Download and installation
	 * 
	 * @param parameters
	 * @throws Exception
	 */
	private byte[] profileDownloadCompleted(
			ES3ProfileDownloadCompletedRequest parameters) throws Exception {
		MsgHeader header = new MsgHeader("profileDownloadCompleted");
		ES3ProfileDownloadCompletedReqBody requestBody = new ES3ProfileDownloadCompletedReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(new String(parameters.getIccid()));
		EuiccMsg<ES3ProfileDownloadCompletedReqBody> euiccMsg = new EuiccMsg<ES3ProfileDownloadCompletedReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		return msgBype;

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3UpdateConnectivityParameters
	 * (
	 * com.whty.efs.webservice.es.message.ES3UpdateConnectivityParametersRequest
	 * parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3UpdateConnectivityParametersResponse es3UpdateConnectivityParameters(
			ES3UpdateConnectivityParametersRequest parameters) {
		LOG.info("Executing operation es3UpdateConnectivityParameters");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3UpdateConnectivityParametersResponse _return = new ES3UpdateConnectivityParametersResponse();
		ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			byte[] sqCounter = getScp03SqCounter(parameters);
			System.out.println("scpCounter" + new String(sqCounter));
			RespMessage respMessage = new Gson().fromJson(new String(sqCounter), RespMessage.class);
	    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
	    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
	    	}

			String counterString = respMessage.getData();//+ 1
			String counter="000000"+Integer.toHexString(Integer.parseInt(counterString, 16)+1);//加密计数器增加
			counter=counter.substring((counter.length()-6), counter.length());
			byte[] msg = updateConnectivityParameters(parameters, counter);
			System.out.println("updateConnectivityParmeters >>>> " + new String(msg));
			respMessage = new Gson().fromJson(new String(msg), RespMessage.class);
	    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
	    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
	    	}
			XMLGregorianCalendar processEnd = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);

			dataType.setSubject("01");
			dataType.setSubjectIdentifier("02");
			dataType.setReason(respMessage.getCode());
			dataType.setMessage(respMessage.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setProcessingStart(processStart);
			_return.setProcessingEnd(processEnd);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "8.2.1")){
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Invalid destination")) {
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Invalid destination");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Execution error")) {
					dataType.setSubjectIdentifier("8.3");
	    			dataType.setSubject("ISD-P");
	    			dataType.setReason("Execution error");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * 获取卡的计数器
	 * @param parameters
	 * @throws Exception 
	 */
	private byte[] getScp03SqCounter(
			ES3UpdateConnectivityParametersRequest parameters) throws Exception {
        MsgHeader header = new MsgHeader("getScp03CounterByHttps");//对应sr-handler
        ES3GetScp03CounterReqBody requestBody = new ES3GetScp03CounterReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(parameters.getIccid());
		EuiccMsg<ES3GetScp03CounterReqBody> euiccMsg = new EuiccMsg<ES3GetScp03CounterReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
        return msgBype;
	}

	/**
	 * update connectivity parameters
	 * first step: get the counter form card call <a href="getScp03CounterByHttps">getScp03CounterByHttps</a>
	 * second step: call <a href="connectParaUpdateByHttps">connectParaUpdateByHttps</a> 
	 * @param parameters
	 * @throws Exception 
	 */
	private byte[] updateConnectivityParameters(
			ES3UpdateConnectivityParametersRequest parameters, String counter) throws Exception {
		MsgHeader header = new MsgHeader("connectParaUpdateByHttps");
		ES3ConnectParaUpdateByHttpsReqBody requestBody = new ES3ConnectParaUpdateByHttpsReqBody();
		requestBody.setEid(new String(parameters.getEid()));//"89001012012341234012345678901224"
		requestBody.setIccid(parameters.getIccid());
		requestBody.setSeqCounter(counter);//
		String smsCenter = new String(parameters.getConnectivityParameters());
		System.out.println("SmsCenter >>>>>>>>>> " + smsCenter);
		requestBody.setSmsCenterNo(smsCenter);
		EuiccMsg<ES3ConnectParaUpdateByHttpsReqBody> euiccMsg = new EuiccMsg<ES3ConnectParaUpdateByHttpsReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		return msgBype;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.whty.efs.webservice.es.message.ES3SmSr#es3AuditEIS(com.whty.efs.
	 * webservice.es.message.ES3AuditEISRequest parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3AuditEISResponse es3AuditEIS(
			ES3AuditEISRequest parameters) {
		LOG.info("Executing operation es3AuditEIS");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3AuditEISResponse _return = new ES3AuditEISResponse();
		ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			byte[] msg = getStatus(parameters);
			System.out.println("personal msg >>> " + new String(msg));
			RespMessage respMessage = new Gson().fromJson(new String(msg), RespMessage.class);
	    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
	    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
	    	} 
			XMLGregorianCalendar processEnd = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			dataType.setSubject("01");
			dataType.setSubjectIdentifier("02");
			dataType.setReason(respMessage.getCode());
			dataType.setMessage(respMessage.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setProcessingStart(processStart);
			_return.setProcessingEnd(processEnd);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")) {
					dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")) {
					dataType.setSubjectIdentifier("8.6");
	    			dataType.setSubject("EIS");
	    			dataType.setReason("Not Allowed (Authorisation)");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")) {
					dataType.setSubjectIdentifier("1.6");
	    			dataType.setSubject("EIS");
	    			dataType.setReason("Function");
	    			statusType.setStatus(StatusType.FAILED);
				} 
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

    /**
     * 查询并更新profile状态
     * @param parameters
     * @return
     * @throws Exception
     */
    private byte[] getStatus(ES3AuditEISRequest parameters) throws Exception {
    	MsgHeader header = new MsgHeader("getStatusByHttps");
    	ES3GetStatusReqBody requestBody = new ES3GetStatusReqBody();
    	requestBody.setEid(new String(parameters.getEid()));
    	requestBody.setIccidList(parameters.getIccid());
    	EuiccMsg<ES3GetStatusReqBody> euiccMsg = new EuiccMsg<ES3GetStatusReqBody>(header, requestBody);
    	String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
    	byte[] msgBype = BaseHttp.doPostBySr(json);
    	return msgBype;
    }
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.whty.efs.webservice.es.message.ES3SmSr#es3SendData(com.whty.efs.
	 * webservice.es.message.ES3SendDataRequest parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3SendDataResponse es3SendData(
			ES3SendDataRequest parameters) {
		LOG.info("Executing operation es3SendData");
		System.out.println("es3SendData data >>> "
				+ new Gson().toJson(parameters));
		com.whty.efs.webservice.es.message.ES3SendDataResponse _return = new ES3SendDataResponse();
		ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			byte[] msg = personal(parameters);
			System.out.println("personal msg >>> " + new String(msg));
			RespMessage respMessage = new Gson().fromJson(new String(msg), RespMessage.class);
	    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
	    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
	    	} else {
	    		msg = InstallProfile(parameters);
	    		System.out.println("InstallProfile >>> " + new String(msg));
	    		respMessage = null;
	    		respMessage = new Gson().fromJson(new String(msg), RespMessage.class);
	    	}
	    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
	    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
	    	} 
			XMLGregorianCalendar processEnd = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			statusType.setStatusCodeData(dataType);
			dataType.setMessage(respMessage.getMessage());
			_return.setProcessingStart(processStart);
            _return.setProcessingEnd(processEnd);
			dataType.setMessage(respMessage.getMessage());
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			_return.setEuiccResponseData(msg);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Uknown")){
					dataType.setSubjectIdentifier("8.3.1");
	    			dataType.setSubject("SD-AID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Invalid destination")) {
					dataType.setSubjectIdentifier("8.3.1");
	    			dataType.setSubject("SD-AID");
	    			dataType.setReason("Invalid destination");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Execution error")) {
					dataType.setSubjectIdentifier("8.3");
	    			dataType.setSubject("ISD-P");
	    			dataType.setReason("Execution error");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * install
	 * 
	 * @param parameters
	 */
	private byte[] InstallProfile(ES3SendDataRequest parameters) throws Exception {
		MsgHeader header = new MsgHeader("installProfile");
		ES3InstallProfileReqBody requestBody = new ES3InstallProfileReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(new String(parameters.getSdAid()));//	"00"
		requestBody.setProfileFile(new String(parameters.getData()));
//		requestBody.setSdAid(new String(parameters.getSdAid()));	// 对不上

		EuiccMsg<ES3InstallProfileReqBody> euiccMsg = new EuiccMsg<ES3InstallProfileReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		return msgBype;
	}

	/**
	 * personal
	 * 
	 * @param parameters
	 */
	private byte[] personal(ES3SendDataRequest parameters) throws Exception {
//		 String certDpEcdsa =
//		 "2281B180E20900AC3A01A97F2181A59301024201025F2001029501885F2404214501017303C801017f4946B041046466E042804FAAC48F839EA53E85D0B8B93F2F015028A472F07F3227AF408170ACFB39D198BA7D0DCFF3DE5032A6CC8F6ACC84EF556BFE530DEC0FF75F2AF59AF001005F3740F7BA7DE1E625D5721A5756F9B9D8D1A25D1667300801BE063AE1FED8CA9E0107B12F00500EEE49D82A5065542E0A38FDD86E276A804BF859CB5528C0457CC830";
		MsgHeader header = new MsgHeader("personalISDP");
		ES3PersonalISDPReqBody requestBody = new ES3PersonalISDPReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(new String(parameters.getSdAid()));// "00" 先
		requestBody.setCertDpEcdsa(SecurityUtil.bytesToHexString(parameters.getData()));
		EuiccMsg<ES3PersonalISDPReqBody> euiccMsg = new EuiccMsg<ES3PersonalISDPReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		return msgBype;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3DisableProfile(com.whty
	 * .efs.webservice.es.message.ES3DisableProfileRequest parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3DisableProfileResponse es3DisableProfile(
			ES3DisableProfileRequest parameters) {
		LOG.info("Executing operation es3DisableProfile");
		System.out.println("es3DisableProfile data >>> "
				+ new Gson().toJson(parameters));
		com.whty.efs.webservice.es.message.ES3DisableProfileResponse _return = new ES3DisableProfileResponse();
		ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			byte[] msg = disableProfile(parameters);
			System.out.println("disable result " + new String(msg));
			RespMessage respMessage = new Gson().fromJson(new String(msg), RespMessage.class);
	    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
	    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
	    	}
			XMLGregorianCalendar processEnd = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			dataType.setSubject("01");
			dataType.setSubjectIdentifier("02");
			dataType.setReason(respMessage.getCode());
			dataType.setMessage(respMessage.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setProcessingStart(processStart);
			_return.setProcessingEnd(processEnd);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			_return.setEuiccResponseData(msg);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Uknown")){
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Invalid destination")) {
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Invalid destination");
	    			statusType.setStatus(StatusType.FAILED);
				}else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "8010")) {
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Not Allowed (Authorisation)");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Invalid")) {
					dataType.setSubjectIdentifier("8.2.2");
	    			dataType.setSubject("POL1");
	    			dataType.setReason("Refuesed");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Refuesed")) {
					dataType.setSubjectIdentifier("8.2.3");
	    			dataType.setSubject("POL2");
	    			dataType.setReason("Refuesed");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Execution error")) {
					dataType.setSubjectIdentifier("8.4");
	    			dataType.setSubject("ISD-R");
	    			dataType.setReason("Execution error");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * disable profile
	 * 
	 * @param parameters
	 * @throws Exception
	 */
	private byte[] disableProfile(ES3DisableProfileRequest parameters)
			throws Exception {
		MsgHeader header = new MsgHeader("disableProfileByHttps");
		ES3DisableProfileReqBody requestBody = new ES3DisableProfileReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(parameters.getIccid());
		EuiccMsg<ES3DisableProfileReqBody> euiccMsg = new EuiccMsg<ES3DisableProfileReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		return msgBype;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.whty.efs.webservice.es.message.ES3SmSr#es3EnableProfile(com.whty.
	 * efs.webservice.es.message.ES3EnableProfileRequest parameters)*
	 */
	public com.whty.efs.webservice.es.message.ES3EnableProfileResponse es3EnableProfile(
			ES3EnableProfileRequest parameters) {
		LOG.info("Executing operation es3EnableProfile");
		System.out.println(parameters);
		com.whty.efs.webservice.es.message.ES3EnableProfileResponse _return = new ES3EnableProfileResponse();
		ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		try {
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			byte[] msg = enableProfile(parameters);
			System.out.println("EnableProfile >>> " + new String(msg));
			RespMessage respMessage = new Gson().fromJson(new String(msg), RespMessage.class);
	    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
	    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
	    	}
			XMLGregorianCalendar processEnd = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);

			statusType.setStatusCodeData(dataType);
			dataType.setMessage(respMessage.getMessage());
			_return.setProcessingStart(processStart);
            _return.setProcessingEnd(processEnd);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			_return.setEuiccResponseData(msg);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			if (ex instanceof EuiccBusiException) {
				if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "0811")){
	    			dataType.setSubjectIdentifier("8.1.1");
	    			dataType.setSubject("EID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Uknown")){
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Uknown");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "8010")) {
					dataType.setSubjectIdentifier("8.2.1");
	    			dataType.setSubject("Profile ICCID");
	    			dataType.setReason("Not Allowed (Authorisation)");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Invalid")) {
					dataType.setSubjectIdentifier("8.2.2");
	    			dataType.setSubject("POL1");
	    			dataType.setReason("Refuesed");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Refuesed")) {
					dataType.setSubjectIdentifier("8.2.3");
	    			dataType.setSubject("POL2");
	    			dataType.setReason("Refuesed");
	    			statusType.setStatus(StatusType.FAILED);
				} else if (StringUtils.equals(((EuiccBusiException) ex).getCode(), "Execution error")) {
					dataType.setSubjectIdentifier("8.4");
	    			dataType.setSubject("ISD-R");
	    			dataType.setReason("Execution error");
	    			statusType.setStatus(StatusType.FAILED);
				}
			}
			statusType.setStatus(StatusType.FAILED);
			dataType.setMessage(ex.getMessage());
			statusType.setStatusCodeData(dataType);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
		}
	}

	/**
	 * enable profile
	 * 
	 * @param parameters
	 */
	private byte[] enableProfile(ES3EnableProfileRequest parameters)
			throws Exception {
		MsgHeader header = new MsgHeader("enableProfileByHttps");
		ES3EnableProfileReqBody requestBody = new ES3EnableProfileReqBody();
		requestBody.setEid(new String(parameters.getEid()));
		requestBody.setIccid(parameters.getIccid());
		EuiccMsg<ES3EnableProfileReqBody> euiccMsg = new EuiccMsg<ES3EnableProfileReqBody>(header, requestBody);
		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
		byte[] msgBype = BaseHttp.doPostBySr(json);
		return msgBype;
	}

}


/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.whty.efs.webservice.es;

import java.math.BigInteger;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.jws.HandlerChain;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.commons.lang.StringUtils;
import org.apache.cxf.interceptor.InInterceptors;
import org.apache.cxf.interceptor.OutInterceptors;
import org.slf4j.LoggerFactory;
import com.google.gson.Gson;
import com.whty.efs.common.bean.RespMessage;
import com.whty.efs.common.exception.ErrorCode;
import com.whty.efs.common.exception.EuiccBusiException;
import com.whty.efs.common.https.BaseHttp;
import com.whty.efs.packets.message.EuiccMsg;
import com.whty.efs.packets.message.MsgHeader;
import com.whty.efs.packets.message.request.ES7AuthenticateSMSRReqBody;
import com.whty.efs.packets.message.request.ES7CreateAdditionalKeySetReqBody;
import com.whty.efs.packets.message.request.SrChangeSendReqBody;
import com.whty.efs.webservice.es.message.ES7AuthenticateSMSRRequest;
import com.whty.efs.webservice.es.message.ES7AuthenticateSMSRResponse;
import com.whty.efs.webservice.es.message.ES7CreateAdditionalKeySetRequest;
import com.whty.efs.webservice.es.message.ES7CreateAdditionalKeySetResponse;
import com.whty.efs.webservice.es.message.ES7HandoverEUICCRequest;
import com.whty.efs.webservice.es.message.ES7HandoverEUICCResponse;
import com.whty.efs.webservice.es.message.ES7SmSr;
import com.whty.efs.webservice.es.message.ExecutionStatusType;
import com.whty.efs.webservice.es.message.StatusCodeDataType;
import com.whty.efs.webservice.es.message.StatusType;

/**
 * This class was generated by Apache CXF 3.1.9
 * 2016-12-28T15:37:31.362+08:00
 * Generated source version: 3.1.9
 * 
 */


@javax.jws.WebService(
                      serviceName = "ES7SmSrService",
                      portName = "ES7SmSrPort",
                      targetNamespace = "http://namespaces.gsma.org/esim-messaging/3",
                      wsdlLocation = "WebServicesAPI/ES7_SMSR.wsdl",
                      endpointInterface = "com.whty.efs.webservice.es.message.ES7SmSr")
@HandlerChain(file="/ws/chain/es-handler-chain.xml")
@InInterceptors(interceptors="org.apache.cxf.interceptor.LoggingInInterceptor")
@OutInterceptors(interceptors="com.whty.efs.webservice.interceptor.ESOutInterceptor") 
public class SmSrES7PortImpl implements ES7SmSr {
	


//    private static final Logger LOG = Logger.getLogger(SmSrES7PortImpl.class.getName());
	private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(SmSrES7PortImpl.class);
//	private final String P="ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
//	private final String A="FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC";
//	private final String B="5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b";
//	private final String Gx="6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
//	private final String Gy="4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5";
//	private final String N="FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551";
//	private final String H="1";

    /* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES7SmSr#es7AuthenticateSMSR(com.whty.efs.webservice.es.message.ES7AuthenticateSMSRRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES7AuthenticateSMSRResponse es7authenticateSMSR(ES7AuthenticateSMSRRequest parameters) { 
        LOG.info("*** Information from webservice *** : Executing operation es7AuthenticateSMSR ............");
        LOG.info("eid:{}, smsrCertificate:{}", new String(parameters.getEis().getEumSignedInfo().getEid()), new String(parameters.getSmsrCertificate()));
        LOG.info("*** Information from webservice *** ");
        
        com.whty.efs.webservice.es.message.ES7AuthenticateSMSRResponse _return = new ES7AuthenticateSMSRResponse();
        
        ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		statusType.setStatusCodeData(dataType);
        
        try {
        	RespMessage respMessage = authenticateSMSR(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			
			_return.setProcessingStart(processStart);
			_return.setProcessingEnd(processStart);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			_return.setRandomChallenge(respMessage.getData().getBytes());
			return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "error:Card response is not 9000")){
        			dataType.setSubjectIdentifier("8.5.3");
        			dataType.setSubject("SM-SR Certificate");
        			dataType.setReason("Certificate Expired");
        			dataType.setMessage("SM-SR certificate expired");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the preparation step hasn’t been performed for the eUICC");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * 认证smsr
     */
    private RespMessage authenticateSMSR(ES7AuthenticateSMSRRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try{
    		MsgHeader header = new MsgHeader("authenticateSMSR");
            ES7AuthenticateSMSRReqBody requestBody = new ES7AuthenticateSMSRReqBody();
    		requestBody.setEid(new String(parameters.getEis().getEumSignedInfo().getEid()));
    		requestBody.setCertSrEcdsa(new String(parameters.getSmsrCertificate()));
    		EuiccMsg<ES7AuthenticateSMSRReqBody> euiccMsg = new EuiccMsg<ES7AuthenticateSMSRReqBody>(header, requestBody);
    		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
    		byte[] msgBype = BaseHttp.doPostBySr(json);
    		respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
            System.out.println("msgBype >> "+new String(msgBype));
    	}catch(Exception e){
    		throw new EuiccBusiException("0104", e.getMessage());
    	}
        
        if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
        return respMessage;
	
    }

	/* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES7SmSr#es7CreateAdditionalKeySet(com.whty.efs.webservice.es.message.ES7CreateAdditionalKeySetRequest2 parameters)*
     */
    public com.whty.efs.webservice.es.message.ES7CreateAdditionalKeySetResponse es7createAdditionalKeySet(ES7CreateAdditionalKeySetRequest parameters) { 
        LOG.info("*** Information from webservice *** : Executing operation es7CreateAdditionalKeySet");
        LOG.info("eid:{}, ephemeralPublicKey:{}" , new String(parameters.getEid()) , new String(parameters.getEphemeralPublicKey()));
        LOG.info("*** Information from webservice *** ");
        
        com.whty.efs.webservice.es.message.ES7CreateAdditionalKeySetResponse _return = new ES7CreateAdditionalKeySetResponse();
        
        ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		statusType.setStatusCodeData(dataType);
        
        try {
        	RespMessage respMessage = CreateAdditionalKeySet(parameters);
            
            GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			
			_return.setProcessingStart(processStart);
			_return.setProcessingEnd(processStart);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			_return.setReceipt(respMessage.getData().getBytes());
			return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the preparation step hasn’t been performed for the eUICC");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    private RespMessage CreateAdditionalKeySet(ES7CreateAdditionalKeySetRequest parameters) throws Exception {
    	RespMessage respMessage = null;
    	try{
    		MsgHeader header = new MsgHeader("createAdditionalKeySet");
    		ES7CreateAdditionalKeySetReqBody requestBody = new ES7CreateAdditionalKeySetReqBody();
    		requestBody.setEid(new String(parameters.getEid()));
    		requestBody.setePK_SR_ECKA(new String(parameters.getEphemeralPublicKey()));
    		EuiccMsg<ES7CreateAdditionalKeySetReqBody> euiccMsg = new EuiccMsg<ES7CreateAdditionalKeySetReqBody>(header, requestBody);
    		String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
    		byte[] msgBype = BaseHttp.doPostBySr(json);
    		respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
    	    System.out.println("msgBype >> "+new String(msgBype));
    	}catch(Exception e){
    		throw new EuiccBusiException("0104", e.getMessage());
    	}
    	
	    if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
		return respMessage;
	}

	/* (non-Javadoc)
     * @see com.whty.efs.webservice.es.message.ES7SmSr#es7HandoverEUICC(com.whty.efs.webservice.es.message.ES7HandoverEUICCRequest2 parameters)*
     */
    public ES7HandoverEUICCResponse es7HandoverEUICC(ES7HandoverEUICCRequest parameters) { 
        LOG.info("*** Information from webservice *** : Executing operation es7HandoverEUICC");
        LOG.info("eid:{}" , new String(parameters.getEis().getEumSignedInfo().getEid()));
        LOG.info("*** Information from webservice *** ");
        
        ES7HandoverEUICCResponse _return = new ES7HandoverEUICCResponse();
        
        ExecutionStatusType statusType = new ExecutionStatusType();
		StatusCodeDataType dataType = new StatusCodeDataType();
		statusType.setStatus(StatusType.EXECUTED_SUCCESS);
		statusType.setStatusCodeData(dataType);
        
        try {
        	handoverEuiccAndAuthenticate(parameters);
        	
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar processStart = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			
			
			_return.setProcessingStart(processStart);
			_return.setProcessingEnd(processStart);
			_return.setAcceptableValidityPeriod(new BigInteger("2"));
			_return.setFunctionExecutionStatus(statusType);
			return _return;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof EuiccBusiException){
        		if(StringUtils.equals(ex.getMessage(), "EID Unknown")){
        			dataType.setSubjectIdentifier("8.1.1");
        			dataType.setSubject("EID");
        			dataType.setReason("Uknown");
        			dataType.setMessage("Indicates that the preparation step hasn’t been performed for the eUICC");
        			statusType.setStatus(StatusType.FAILED);
        			statusType.setStatusCodeData(dataType);
        			_return.setFunctionExecutionStatus(statusType);
        		}else{
        			statusType.setStatus(StatusType.FAILED);
        			_return.setFunctionExecutionStatus(statusType);
        		}
        		return _return;
        	}
        	
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /**
     * handoverEUICC 和 authenticateSMSR合在一起
     * @param parameters
     * @throws Exception
     */
	private void handoverEuiccAndAuthenticate(ES7HandoverEUICCRequest parameters) throws Exception {
		RespMessage respMessage = null;
		try{
			MsgHeader header = new MsgHeader("srChangeSend");
			SrChangeSendReqBody requestBody = new SrChangeSendReqBody();
			byte[] eid = parameters.getEis().getEumSignedInfo().getEid();
			requestBody.setEid(new String(eid));
			requestBody.setTargetSmsrId(parameters.getEis().getSmsrId());
			EuiccMsg<SrChangeSendReqBody> euiccMsg = new EuiccMsg<SrChangeSendReqBody>(header, requestBody);
			String json = new Gson().toJson(euiccMsg, EuiccMsg.class);
			byte[] msgBype = BaseHttp.doPostBySr(json);
		    System.out.println(new String(msgBype));
		    respMessage = new Gson().fromJson(new String(msgBype), RespMessage.class);
		}catch(Exception e){
			throw new EuiccBusiException("0104", e.getMessage());
		}
		
    	if(!StringUtils.equals(ErrorCode.SUCCESS, respMessage.getCode())){
    		throw new EuiccBusiException(respMessage.getCode(),respMessage.getMessage());
    	}
	    
	}


}

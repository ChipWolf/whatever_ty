
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.whty.efs.webservice.es;

import java.util.Date;
import java.util.GregorianCalendar;

import javax.jws.HandlerChain;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.cxf.interceptor.InInterceptors;
import org.apache.cxf.interceptor.OutInterceptors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;
import com.whty.efs.webservice.es.message.ES7HandleSMSRChangeNotification;
import com.whty.efs.webservice.es.message.ES7SmSr;
import com.whty.efs.webservice.es.message.ExecutionStatusType;
import com.whty.efs.webservice.es.message.StatusCodeDataType;
import com.whty.efs.webservice.es.message.StatusType;

/**
 * This class was generated by Apache CXF 3.1.9
 * 2016-12-28T15:37:31.362+08:00
 * Generated source version: 3.1.9
 * 
 */


@javax.jws.WebService(
                      serviceName = "ES7SmSrService",
                      portName = "ES7SmSrPort",
                      targetNamespace = "http://namespaces.gsma.org/esim-messaging/3",
                      wsdlLocation = "WebServicesAPI/ES7_SMSR.wsdl",
                      endpointInterface = "com.whty.efs.webservice.es.message.ES7SmSr")
@HandlerChain(file="/ws/chain/es-handler-chain.xml")
@InInterceptors(interceptors="org.apache.cxf.interceptor.LoggingInInterceptor")
@OutInterceptors(interceptors="com.whty.efs.webservice.interceptor.ESOutInterceptor") 
public class SmSrES7PortImpl implements ES7SmSr {
	


    private static final Logger LOG = LoggerFactory.getLogger(SmSrES7PortImpl.class);

	@Override
	public void es7HandleSMSRChangeNotification(ES7HandleSMSRChangeNotification parameters) {
		LOG.info("Executing operation es7HandleSMSRChangeNotification");
        System.out.println(parameters);
        System.out.println("es7HandleSMSRChangeNotification=" + new Gson().toJson(parameters));
        try {
            com.whty.efs.webservice.es.message.ES7HandleSMSRChangeNotification _return = new ES7HandleSMSRChangeNotification();
            GregorianCalendar c = new GregorianCalendar();
            c.setTime(new Date());
            XMLGregorianCalendar processStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            ExecutionStatusType statusType = new ExecutionStatusType();
            StatusCodeDataType dataType = new StatusCodeDataType();
            dataType.setSubject("01");
            dataType.setSubjectIdentifier("02");
            dataType.setReason("03");
            dataType.setMessage("04");
            statusType.setStatus(StatusType.EXECUTED_SUCCESS);
            statusType.setStatusCodeData(dataType);
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
		
	}

}
